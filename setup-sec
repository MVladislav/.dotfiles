#!/usr/bin/env bash

PATH="/usr/bin/:/usr/local/bin/:/bin:/usr/sbin/:/sbin:/snap/bin/:$HOME/.local/bin"
set -euo pipefail
IFS=$'\n\t'

cat <<'EOF'
      .--.               [ SECURITY ]
     |o_o )
     |:_/ |        .---.
    //   \ \      /     \
   (|  ⌂  | )     | [🔒] |
  /'\_   _/`\     \     /
  \___)=(___/      '---'

EOF

[[ -f "./setup-helper" ]] || { echo 'Not found "./setup-helper" script'; exit 1; }
source "./setup-helper"

# ******************************************************************************

: "${VM_SEC_OPT:="${HOME}/opt"}"

# CONFS :: variables -----------------------------------------------------------
VM_SEC_LISTS_SECLISTS="${VM_SEC_OPT}/sec/SecLists"
VM_SEC_LISTS_PAYLOADS="${VM_SEC_OPT}/sec/PayloadsAllTheThings"
VM_SEC_NMAP_SCRIPTS='/usr/share/nmap/scripts'
VM_SEC_EXT_BROWSER="${VM_SEC_OPT}/sec/BrowserExt"

RUN_INSTALL_ROCM=0
RUN_INSTALL_TOOLS=0
RUN_INSTALL_JOHN=0
RUN_INSTALL_HASHCAT=0
RUN_INSTALL_TIO=0

RUN_LOAD_LISTS=0
RUN_LOAD_NMAP_SCRIPTS=0
RUN_LOAD_EXT_BROWSER=0

VERSION_HASHCAT_G="https://github.com/hashcat/hashcat.git"
VERSION_HASHCAT="v7.1.2"
VERSION_TIO_G=https://github.com/tio/tio.git
VERSION_TIO=v3.9
VERSION_JTR_G="https://github.com/openwall/john.git"
VERSION_JTR="bleeding-jumbo"

JTR_ROCM_FOLDER="/opt/rocm"

# ******************************************************************************

main() {
  [[ $IS_SUDO_INSTALL -eq 1 ]] && sudo -k

  [[ $RUN_INSTALL_ROCM -eq 1 ]] && install_rocm
  [[ $RUN_INSTALL_TOOLS -eq 1 ]] && install_tools
  [[ $RUN_INSTALL_JOHN -eq 1 ]] && install_john
  [[ $RUN_INSTALL_HASHCAT -eq 1 ]] && install_hashcat
  [[ $RUN_INSTALL_TIO -eq 1 ]] && install_tio

  [[ $RUN_LOAD_LISTS -eq 1 ]] && load_lists
  [[ $RUN_LOAD_NMAP_SCRIPTS -eq 1 ]] && load_nmap_scripts
  [[ $RUN_LOAD_EXT_BROWSER -eq 1 ]] && load_ext_browser

  print_info2 "\n✅ All finished!"
}

# ******************************************************************************

# SERVICE :: install ROCM ------------------------------------------------------
install_rocm() {
  print_info2 "\n🚀 ROCM :: Installing AMD ROCm support..."

  curl -L https://repo.radeon.com/amdgpu-install/latest/ubuntu/noble/amdgpu-install_7.0.1.70001-1_all.deb \
    -o "$DEPS_INSTALL_PATH/amdgpu-install.deb"
  $RUN_WITH_SUDO apt install -y "$DEPS_INSTALL_PATH/amdgpu-install.deb"
  $RUN_WITH_SUDO apt update
  $RUN_WITH_SUDO apt install -y python3-setuptools python3-wheel
  $RUN_WITH_SUDO usermod -a -G render,video $LOGNAME
  $RUN_WITH_SUDO apt install -y rocm
  # $RUN_WITH_SUDO amdgpu-install --accept-eula --no-dkms --no-32 --usecase=graphics,rocm

  [[ $IS_SUDO_INSTALL -eq 1 ]] && sudo -k
  print_info2 "🚀 ROCM :: AMD ROCm support installed!"
}

# SERVICE :: install TOOLS -----------------------------------------------------
install_tools() {
  print_info2 "\n🚀 TOOLS :: Installing additional tools..."

  print_notes "   ⬇️ Install 'jq'"
  $RUN_WITH_SUDO apt install jq
  [[ $IS_SUDO_INSTALL -eq 1 ]] && sudo -k

  print_notes "   ⬇️ Install 'monolith'"
  cargo install monolith # saving complete web pages as a single HTML file

  go_github_commit_date_and_download() {
    IFS='/' read -r owner repo addition <<<"$1"
    echo 'LAST COMMIT' "[${repo}] ::" "$(curl -s "https://api.github.com/repos/${owner}/${repo}/commits" | jq '.[0].commit.committer.date')"
    local package_path="${owner}/${repo}"
    if [ -n "$addition" ]; then package_path="${package_path}/${addition}"; fi
    print_notes "   ⬇️ Install '${package_path}'"
    go install "github.com/${package_path}@${2:-latest}"
  }

  go_github_commit_date_and_download 'charmbracelet/gum'
  go_github_commit_date_and_download 'projectdiscovery/httpx/cmd/httpx'
  go_github_commit_date_and_download 'projectdiscovery/katana/cmd/katana'
  go_github_commit_date_and_download 'hahwul/dalfox/v2'
  go_github_commit_date_and_download 'OJ/gobuster/v3'
  go_github_commit_date_and_download 'ffuf/ffuf/v2'
  go_github_commit_date_and_download 'dwisiswant0/unew'
  go_github_commit_date_and_download 'BishopFox/sj'
  go_github_commit_date_and_download 'tomnomnom/waybackurls'
  go_github_commit_date_and_download 'tomnomnom/gf'

  print_info2 "🚀 TOOLS :: Additional tools installed!"

  print_info2 "\n🚀 TOOLS :: Extend manually install:"
  print_info2 "     - https://addons.mozilla.org/en-US/firefox/addon/hackbar/"
}

# SERVICE :: install JOHN ------------------------------------------------------
install_john() {
  local s_name_l="john"
  local s_name_u="JTR"
  print_info2 "\n🚀 $s_name_u :: install ${s_name_l}..."
  print_notes "   💡 current installed version :: '$("$USER_LOCAL_PREFIX_BIN/$s_name_l" -h 2>/dev/null | head -n1 | cut -d' ' -f-4)'"
  rm -rf "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null

  # Define packages needed for build and install
  local packages_tools=()
  local packages_build=(git build-essential pkg-config libssl-dev libnss3-dev libkrb5-dev libgmp-dev libbz2-dev libopencl-clang-dev opencl-headers ocl-icd-opencl-dev)
  install_dependencies_needs packages_tools[@] packages_build[@]

  print_notes "   💡 Cloning ${s_name_l}..."
  git clone -q "$VERSION_JTR_G" "$DEPS_INSTALL_PATH/$s_name_l"
  pushd "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null
  [[ $INSTALL_SOURCE_FROM == 'release' ]] && git checkout -q "$VERSION_JTR"

  print_notes "   💡 Build and install ${s_name_l}..."
  pushd "$DEPS_INSTALL_PATH/$s_name_l/src" 1>/dev/null

  ./configure \
    LDFLAGS="-L$JTR_ROCM_FOLDER/lib" \
    CPPFLAGS="-I$JTR_ROCM_FOLDER/include" \
    --prefix="$USER_LOCAL_PREFIX" \
    --exec_prefix="$USER_LOCAL_PREFIX_BIN" \
    --enable-opencl \
    1>/dev/null
  make -s clean 1>/dev/null
  make -sj"$(nproc)" 1>/dev/null
  make -sj"$(nproc)" strip 1>/dev/null

  # Copy the "run" directory (which contains additional tools) to a persistent location.
  if [ -d "$DEPS_INSTALL_PATH/john/run" ]; then
    rm -rf "$DEPS_INSTALL_PATH/john/run"/*.dSYM >/dev/null || true
    mkdir -p "$USER_LOCAL_PREFIX_BIN"
    mv -f "$DEPS_INSTALL_PATH/john/run"/{john,john-*,*2john,unshadow,unique,undrop,unafs,base64conv,tgtsnarf,mkvcalcproba,genmkvpwd,calc_stat,raw2dyna,cprepair,SIPdump} \
    "$USER_LOCAL_PREFIX_BIN" >/dev/null || true
    mkdir -p "$USER_LOCAL_PREFIX/share/john"
    cp -a "$DEPS_INSTALL_PATH/john/run"/* "$USER_LOCAL_PREFIX/share/john" >/dev/null || true
    mv -f "$USER_LOCAL_PREFIX/share/john"/*.{pl,py,rb} "$USER_LOCAL_PREFIX/share/john"/{relbench,benchmark-unify,mailer,makechr} "$USER_LOCAL_PREFIX_BIN" >/dev/null || true
  fi

  popd 1>/dev/null
  popd 1>/dev/null
  rm -rf "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null
  print_notes "   💡 new installed version :: '$("$USER_LOCAL_PREFIX_BIN/$s_name_l" -h 2>/dev/null | head -n1 | cut -d' ' -f-4)'"

  # Remove build dependencies if any
  install_dependencies_needs_rm

  print_info2 "🚀 $s_name_u :: $s_name_l installed!"
  print_notes "   💡 Verify OpenCL devices with: john --list=opencl-devices"
  print_notes "   💡 Use '--device=X' to select AMD GPU (check device numbers)"
}

# SERVICE :: install HASHCAT ---------------------------------------------------
install_hashcat() {
  local s_name_l="hashcat"
  local s_name_u="HASHCAT"
  print_info2 "\n🚀 $s_name_u :: install ${s_name_l}..."
  print_notes "   💡 current installed version :: '$("$USER_LOCAL_PREFIX_BIN/$s_name_l" --version 2>/dev/null | head -n1)'"
  rm -rf "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null

  # Define packages needed for build and install
  local packages_tools=(clinfo pocl-opencl-icd ocl-icd-libopencl1)
  local packages_build=(git build-essential pkg-config opencl-headers ocl-icd-opencl-dev zlib1g-dev)
  install_dependencies_needs packages_tools[@] packages_build[@]

  print_notes "   💡 Cloning ${s_name_l}..."
  git clone -q "$VERSION_HASHCAT_G" "$DEPS_INSTALL_PATH/$s_name_l"
  pushd "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null
  [[ $INSTALL_SOURCE_FROM == 'release' ]] && git checkout -q "$VERSION_HASHCAT"

  print_notes "   💡 Build and install ${s_name_l}..."
  make -s clean 1>/dev/null
  make -sj"$(nproc)" SHARED=1 1>/dev/null
  make install PREFIX="$USER_LOCAL_PREFIX" 1>/dev/null
  popd 1>/dev/null
  rm -rf "$DEPS_INSTALL_PATH/$s_name_l" 1>/dev/null
  print_notes "   💡 new installed version :: '$("$USER_LOCAL_PREFIX_BIN/$s_name_l" --version 2>/dev/null | head -n1)'"

  # Remove build dependencies if any
  install_dependencies_needs_rm

  if ! clinfo | grep -q 'Device'; then
    print_warn "   ⚠️ No OpenCL devices found! Hashcat may not function correctly."
  fi

  print_info2 "🚀 $s_name_u :: $s_name_l installed!"
}

# SERVICE :: install TIO -------------------------------------------------------
install_tio() {
  print_info2 "\n🚀 TIO :: install tio ..."
  print_notes "   💡 current installed version :: '$("$USER_LOCAL_PREFIX_BIN/tio" --version 2>/dev/null | head -n1)'"
  rm -rf "$DEPS_INSTALL_PATH/tio" 1>/dev/null

  # Define packages needed for build and install
  local packages_tools=()
  local packages_build=(git meson cmake ninja-build pkg-config libglib2.0-dev liblua5.2-dev)
  install_dependencies_needs packages_tools[@] packages_build[@]

  print_notes "   💡 Cloning tio..."
  git clone -q "$VERSION_TIO_G" "$DEPS_INSTALL_PATH/tio"
  pushd "$DEPS_INSTALL_PATH/tio" 1>/dev/null
  [[ $INSTALL_SOURCE_FROM == 'release' ]] && git checkout -q "$VERSION_TIO"

  print_notes "   💡 Build and install tio..."
  meson setup build --prefix="$USER_LOCAL_PREFIX/" 1>/dev/null
  meson compile -C build 1>/dev/null
  meson install -C build 1>/dev/null
  popd 1>/dev/null
  rm -rf "$DEPS_INSTALL_PATH/tio" 1>/dev/null
  print_notes "   💡 new installed version :: '$("$USER_LOCAL_PREFIX_BIN/tio" --version 2>/dev/null | head -n1)'"

  # Remove build dependencies if any
  install_dependencies_needs_rm

  print_info2 "🚀 TIO :: tio installed!"
}

# ******************************************************************************

# SOURCE :: load lists ---------------------------------------------------------
load_lists() {
  print_info2 "\n🚀 TOOLS :: Clone lists..."

  print_notes "   ⬇️ Cloning 'SecLists'..."
  git clone -q https://github.com/danielmiessler/SecLists.git "$VM_SEC_LISTS_SECLISTS"
  print_notes "   ⬇️ Cloning 'PayloadsAllTheThings'..."
  git clone -q https://github.com/swisskyrepo/PayloadsAllTheThings.git "$VM_SEC_LISTS_PAYLOADS"

  print_info2 "🚀 TOOLS :: Lists cloning done!"
}

# SOURCE :: load nmap scripts --------------------------------------------------
load_nmap_scripts() {
  print_info2 "\n🚀 NMAP :: Clone more nmap scripts..."

  print_notes "   ⬇️ Cloning 'vulnersCom/nmap-vulners'..."
  $RUN_WITH_SUDO git clone -q https://github.com/vulnersCom/nmap-vulners "$VM_SEC_NMAP_SCRIPTS/nmap-vulners"
  print_notes "   ⬇️ Cloning 'scipag/vulscan'..."
  $RUN_WITH_SUDO git clone -q https://github.com/scipag/vulscan "$VM_SEC_NMAP_SCRIPTS/vulscan"

  print_notes "   💡 Update nmap scripts"
  $RUN_WITH_SUDO nmap --script-updatedb 1>/dev/null

  [[ $IS_SUDO_INSTALL -eq 1 ]] && sudo -k
  print_info2 "🚀 NMAP :: Scripts cloning done!"
}

# SOURCE :: load nmap scripts --------------------------------------------------
load_ext_browser() {
  print_info2 "\n🚀 EXT :: Clone browser extensions..."

  print_notes "   ⬇️ Cloning 'wayback-url-finder'..."
  $RUN_WITH_SUDO git clone -q https://github.com/coffinxp/wayback-url-finder "$VM_SEC_EXT_BROWSER"

  print_notes "   💡 Do not forget load extensions in your browser!"
  print_info2 "🚀 EXT :: Browser extensions cloning done!"
}

# ******************************************************************************

# Function to show usage information
usage() {
  print_info "📑 Usage: $0 [options]"
  print_info "   Options:"
  print_info "     -h,         --help                      Show this help message and exit"
  print_info "     -irocm,     --install-rocm              Install RCOM"
  print_info "     -ijohn,     --install-john-the-ripper   Install John the Ripper"
  print_info "     -ihashcat,  --install-hashcat           Install HastCat"
  print_info "     -itio,      --install-tio               Install tio"
  print_info "     -itools,    --install-additional-tools  Install additional tools"
  print_info "     -llists,    --load-lists                Load/Clone lists"
  print_info "     -lnmap,     --load-nmap-scripts         Load/Clone more NMAP scripts"
}

# Function to parse command-line arguments
parse_args() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    -h | --help)
      usage
      exit 0
      ;;
    -irocm | --install-rocm)
      # RUN_INSTALL_ROCM=1
      echo "ROCM installer is work in progress"
      ;;
    -ijohn | --install-john-the-ripper)
      RUN_INSTALL_JOHN=1
      ;;
    -ihashcat | --install-hashcat)
      RUN_INSTALL_HASHCAT=1
      ;;
    -itio | --install-tio)
      RUN_INSTALL_TIO=1
      ;;
    -itools | --install-additional-tools)
      RUN_INSTALL_TOOLS=1
      ;;
    -llists | --load-lists)
      RUN_LOAD_LISTS=1
      ;;
    -lnmap | --load-nmap-scripts)
      RUN_LOAD_NMAP_SCRIPTS=1
      ;;
    -s)
      INSTALL_SOURCE_FROM=source
      ;;
    -d | --debug)
      set -x # Enable debug mode
      ;;
    -upc | --update-check)
      check_for_newer_tag "$VERSION_HASHCAT_G" "$VERSION_HASHCAT"
      check_for_newer_tag "$VERSION_TIO_G" "$VERSION_TIO"
      check_for_newer_tag "$VERSION_JTR_G" "$VERSION_JTR"
      ;;
    *)
      print_error "❌ Unknown option: $key"
      usage
      exit 1
      ;;
    esac
    shift
  done
}

# ******************************************************************************

print_info2 "▶️ Starting script $0 ..."

# Parse command-line arguments
parse_args "$@"

main
exit 0
