#!/usr/bin/env bash

VM_SEC_LISTS_SECLISTS=~'/opt/sec/SecLists'
# VM_SEC_LISTS_PAYLOADS=~'/opt/sec/PayloadsAllTheThings'
VM_SEC_LISTS_SECFILES=~'/opt/sec/SecFiles'
# VM_SEC_NUCLEI_TEMPLATES=~'/.dotfiles/sec/nuclei'

VM_SEC_USER_AGENT=${VM_SEC_USER_AGENT:-'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:129.0) Gecko/20100101 Firefox/129.0'}

######################################################################
##
## DEFAULTS:: extender
##
######################################################################

alias nuclei="nuclei -header 'User-Agent: ${VM_SEC_USER_AGENT}'"
alias whatweb="whatweb -U='${VM_SEC_USER_AGENT}'"
alias sj="sj -a '${VM_SEC_USER_AGENT}'"
alias sqlmap="sqlmap --random-agent"

######################################################################
##
## FUNCTIONS:: tools
##
######################################################################

alias vm_sec_server='python3 -m http.server 4445'
alias vm_sec_tunnel='ngrok http 4445'

######################################################################
##
## FUNCTIONS:: tools :: NMAP
##
######################################################################
# -Pn -sS -T4
alias vm_sec_nmap_ssl='mkdir -p nmap && sudo nmap -vv -p 443 --script "ssl-enum-ciphers"'
alias vm_sec_nmap_quick='mkdir -p nmap && sudo nmap -vv -sC -oA nmap/scan1'
alias vm_sec_nmap_deep='mkdir -p nmap && sudo nmap -vv -sC -sV -O -oA nmap/scan2 --script "nmap-vulners/,vulscan/"'

xsltproc() {
  local NMAP_REPORT_ID="${1:-1}"
  mkdir -p /var/log/nmap
  xsltproc \
    -o "/var/log/nmap/report-$(date +%Y-%m-%d)-${NMAP_REPORT_ID}.html" \
    /opt/nmap/nmap-bootstrap.xsl \
    "/var/log/nmap/report-$(date +%Y-%m-%d)-${NMAP_REPORT_ID}.xml" \
    "$@"
}
nmap-report() {
  local NMAP_REPORT_ID="${1:-1}"
  mkdir -p /var/log/nmap
  nmap -oA /var/log/nmap/report-"$(date +%Y-%m-%d)"-"${NMAP_REPORT_ID}" "$@"
  xsltproc
}

######################################################################
##
## FUNCTIONS:: tools
##
######################################################################

alias vm_sec_massdns="massdns -r '${VM_SEC_LISTS_SECLISTS}/massdns/lists/resolvers.txt' -t A -o S targets.txt -w hosts.txt -s 4000"
alias vm_sec_what="whatweb -v"

vm_sec_crt() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <DOMAIN>"
    return 1
  fi
  curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "https://crt.sh/?output=json&q=$1" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u
}

vm_sec_wayback() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <FILE> :: FILE: contains Domains per line"
    return 1
  fi

  # curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -sG "https://web.archive.org/cdx/search/cdx" --data-urlencode "url=*.${domain}*" --data-urlencode "collapse=urlkey" --data-urlencode "output=text" --data-urlencode "fl=original"

  awk -F/ '{print $3 == "" ? $1 : $3}' <"$1" | sort -u | waybackurls | tee waybacks.txt
  # TODO: extend with url cleanup
  # TODO: nuclei -c 32 -t "${VM_SEC_NUCLEI_TEMPLATES}/openRedirect.yaml" :: sql injection probs
}

vm_sec_xssall() {
  gum input --placeholder='Input Target IP/DOMAIN' |
    httpx -silent |
    katana -silent |
    dalfox pipe --silence
}

# echo https://192.168.111.41 | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml -silent | dalfox pipe --skip-bav | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | unew
# echo https://192.168.111.41 | katana -jc -d 5 -c 50 -ef css,woff,woff2,eot,ttf,tiff,tif -kf robotstxt,sitemapxml | grep -v -e "="
# subfinder -d https://192.168.111.41 -silent -all | httpx -silent | katana -d 5 silent -em js,jsp,json | grep -P "(?i).+\.js(?:on|p)?$"

alias vm_sec_gobuster="gobuster dir --wordlist '${VM_SEC_LISTS_SECLISTS}/diccnoext.txt' --wildcard --url"

alias vm_sec_fuzz="ffuf -w '${VM_SEC_LISTS_SECLISTS}/content_discovery_all.txt' -mc all -u"
vm_sec_fuzz_path() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^https?:// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}/FUZZ" \
    -w "${VM_SEC_LISTS_SECLISTS}/Discovery/Web-Content/common.txt" \
    -c -ac -recursion
}
vm_sec_fuzz_dns() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^https?:// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}" \
    -w "${VM_SEC_LISTS_SECLISTS}/Discovery/DNS/namelist.txt" \
    -H "Host: ${protocol}://FUZZ.${domain}"
}

vm_sec_katana() {
  echo "$1" | katana -headless -fs rdn -d 1 -ct 1 -rl 10 -o result.txt -jsonl
}

alias vm_sec_sj="sj -i"

# https://pentest-tools.com/website-vulnerability-scanning/website-scanner
alias vm_sec_scan_ptt='docker run --rm -it pentesttoolscom/ptt-scan:latest run website_scanner'
# https://github.com/wpscanteam/wpscan
# --plugins-detection aggressive
alias vm_sec_scan_wpscan='docker run --rm -it wpscanteam/wpscan:latest --rua -e ap,at,tt,cb,dbe,u,m --url'

######################################################################
##
## FUNCTIONS:: tools
##
######################################################################

vm_sec_attack_sql() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <HOST_PATH>"
    return 1
  fi

  local HOST_PATH="$1"
  local TODO_1="${2:id}"
  local TODO_2="${3:mysql}"
  local TODO_3="${4:10}"

  # TODO: extend with 'proxychains'
  sqlmap -u "$HOST_PATH" --dbs --batch -p "$TODO_1" --random-agent --tamper=between,space2comment --dbms="$TODO_2" --tech=B --no-cast --flush-session --threads "$TODO_3"
  # --level 5 --risk 3
}

######################################################################
##
## HELPER:: converter
##
######################################################################
vm_sec_encode_utf8() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | xxd -p -u | sed 's/\(..\)/\\x\1/g'
}

vm_sec_encode_utf16() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | iconv -f UTF-8 -t UTF-16LE | xxd -p | sed 's/\(..\)\(..\)/\\u{\2\1}/g' | sed 's/\\u{00\([0-9a-fA-F]\{2\}\)}/\\u{\1}/g'
}

vm_sec_encode_base64() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  echo -n "$1" | base64
}

######################################################################
##
## FUNCTIONS:: base
##
######################################################################
vm_sec_ip_country() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <IP>"
    return 1
  fi

  local service1="http://ip-api.com/json/$1?fields=5254673"
  local query1='[.query, .continent, .country, .city, .isp, .org, .as, .asname] | join(" :: ")'
  #local service="https://ipapi.co/$1/json"
  #local query='[.country, .city, .asn, .org] | join(" :: ")'
  local service2="https://ipinfo.io/$1/json"
  local query2='[.hostname, .country, .region, .city, .asn, .org, .postal] | join(" :: ")'

  curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$service1" | jq "$query1"
  curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$service2" | jq "$query2"
}

vm_sec_ip_country_batch() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <FILE> :: FILE: contains IP per line"
    return 1
  fi

  local ips
  ips=$(jq -R -s -c 'split("\n") | map(select(length > 0))' "$1")

  curl http://ip-api.com/batch \
    -H "User-Agent: ${VM_SEC_USER_AGENT}" \
    --data "$ips" |
    jq -r '.[] | "\(.country) :: \(.city) :: \(.isp) :: \(.org) :: \(.query)"' |
    sort -h
}

vm_sec_dig_multi() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <DOMAIN>"
    return 1
  fi

  local domain=$1
  local result=""

  echo "=== MX Records for $domain ==="
  result=$(dig "$domain" MX +short)
  [ -z "$result" ] && echo "No MX records found" || echo "$result"

  echo -e "=== TXT (SPF) Records for $domain ==="
  result=$(dig "$domain" TXT +short | grep -i "v=spf" --color=never)
  [ -z "$result" ] && echo "No TXT records found" || echo "$result"
  echo -e "=== SPF Records for $domain ==="
  result=$(dig "$domain" SPF +short | grep -i "v=spf" --color=never)
  [ -z "$result" ] && echo "No SPF records found" || echo "$result"

  echo -e "=== DMARC Records for $domain ==="
  result=$(dig "_dmarc.$domain" TXT +short)
  [ -z "$result" ] && echo "No DMARC records found" || echo "$result"

  # echo -e "=== DKIM Records for $domain ==="
  # dkim_selector="default." # Change this to your DKIM selector if needed
  # result=$(dig "${dkim_selector}_domainkey.$domain" TXT +short)
  # [ -z "$result" ] && echo "No DKIM records found" || echo "$result"

  echo -e "\n=== NS Records for $domain ==="
  result=$(dig "$domain" NS +short)
  [ -z "$result" ] && echo "No NS records found" || echo "$result"
  echo -e "=== A Records for $domain ==="
  result=$(dig "$domain" A +short)
  [ -z "$result" ] && echo "No A records found" || echo "$result"
  echo -e "=== AAAA Records for $domain ==="
  result=$(dig "$domain" AAAA +short)
  [ -z "$result" ] && echo "No AAAA records found" || echo "$result"
  echo -e "=== CNAME Records for $domain ==="
  result=$(dig "$domain" CNAME +short)
  [ -z "$result" ] && echo "No CNAME records found" || echo "$result"

  echo -e "\n=== SOA Records for $domain ==="
  result=$(dig "$domain" SOA +short)
  [ -z "$result" ] && echo "No SOA records found" || echo "$result"
  echo -e "=== CAA Records for $domain ==="
  result=$(dig "$domain" CAA +short)
  [ -z "$result" ] && echo "No CAA records found" || echo "$result"
  echo -e "=== SRV Records for $domain ==="
  result=$(
    dig "$domain" SRV +short
    dig "_imaps._tcp.@$domain" SRV +short
    dig "_smtps._tcp.@$domain" SRV +short
  )
  [ -z "$result" ] && echo "No SRV records found" || echo "$result"
}

######################################################################
##
## FUNCTIONS:: ...
##
######################################################################
vm_sec_api_doc_search() {
  # Function to check for active API documentation endpoints on a domain
  if [ -z "$1" ]; then
    echo "Usage: $0 <domain>"
    return 1
  fi

  # Ensure the domain starts with http:// or https://
  local domain="$1"
  if [[ ! "$domain" =~ ^https?:// ]]; then
    domain="http://$domain"
  fi

  # List of common API documentation paths (can be extended)
  local endpoint_docs=(
    '/swagger-ui.html'
    '/swagger-ui/'
    '/swagger-ui/index.html'
    '/api-docs'
    '/v2/api-docs'
    '/v3/api-docs'
    '/swagger.json'
    '/openapi.json'
    '/api/swagger.json'
    '/docs'
    '/api-docs/'
    '/swagger/'
    '/swagger/index.html'
    '/swagger/v1/swagger.json'
    '/swagger/v2/swagger.json'
    '/swagger/v3/swagger.json'
    '/openapi/'
    '/openapi/v1/'
    '/openapi/v2/'
    '/openapi/v3/'
    '/api/v1/swagger.json'
    '/api/v2/swagger.json'
    '/api/v3/swagger.json'
    '/documentation'
    '/documentation/swagger'
    '/documentation/openapi'
    '/swagger/docs/v1'
    '/swagger/docs/v2'
    '/swagger/docs/v3'
    '/swagger-ui.html#/'
    '/swagger-ui/index.html#/'
    '/openapi/ui'
    '/swagger-ui/v1/'
    '/swagger-ui/v2/'
    '/swagger-ui/v3/'
    '/api/swagger-ui.html'
    '/api/swagger-ui/'
    '/api/documentation'
    '/v1/documentation'
    '/v2/documentation'
    '/v3/documentation'
    '/swagger-resources'
    '/swagger-resources/configuration/ui'
    '/swagger-resources/configuration/security'
    '/swagger-resources/swagger.json'
    '/swagger-resources/openapi.json'
    '/swagger-ui/swagger-ui.html'
    '/swagger-ui/swagger-ui/'
    '/swagger-ui.html/swagger-resources'
    '/swagger-ui.html/swagger-resources/configuration/ui'
    '/swagger-ui.html/swagger-resources/configuration/security'
    '/api/swagger-resources'
    '/api/swagger-resources/configuration/ui'
    '/api/swagger-resources/configuration/security'
    '/api/swagger-resources/swagger.json'
    '/api/swagger-resources/openapi.json'
    '/swagger/v1/'
    '/swagger/v2/'
    '/swagger/v3/'
    '/swagger-ui/v1/swagger.json'
    '/swagger-ui/v2/swagger.json'
    '/swagger-ui/v3/swagger.json'
    '/api/swagger-ui/v1/'
    '/api/swagger-ui/v2/'
    '/api/swagger-ui/v3/'
    '/openapi/swagger.json'
    '/openapi/openapi.json'
    '/api/openapi'
    '/api/openapi.json'
    '/api/v1/openapi.json'
    '/api/v2/openapi.json'
    '/api/v3/openapi.json'
    '/swagger.yaml'
    '/openapi.yaml'
    '/swagger.yml'
    '/openapi.yml'
    '/v1/swagger.json'
    '/v2/swagger.json'
    '/v3/swagger.json'
    '/v1/openapi.json'
    '/v2/openapi.json'
    '/v3/openapi.json'
    '/v1/swagger.yaml'
    '/v2/swagger.yaml'
    '/v3/swagger.yaml'
    '/v1/openapi.yaml'
    '/v2/openapi.yaml'
    '/v3/openapi.yaml'
    '/swagger/api'
    '/openapi/api'
    '/swagger/api-docs'
    '/openapi/api-docs'
    '/swagger/api/swagger.json'
    '/openapi/api/openapi.json'
    '/swagger/api/v1/swagger.json'
    '/swagger/api/v2/swagger.json'
    '/swagger/api/v3/swagger.json'
    '/openapi/api/v1/openapi.json'
    '/openapi/api/v2/openapi.json'
    '/openapi/api/v3/openapi.json'
    '/swagger/api/swagger.yaml'
    '/swagger/api/swagger.yml'
    '/openapi/api/openapi.yaml'
    '/openapi/api/openapi.yml'
  )

  echo "Checking API documentation endpoints on: $domain"

  local found_docs=0
  local not_found_docs=0
  for endpoint in "${endpoint_docs[@]}"; do
    local url="${domain}${endpoint}"
    # Get only the HTTP response code (-s silent, -o discard output, -w writes status code)
    local curl_reps=-1
    curl_reps=$(curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -ks -o /dev/null -w '%{http_code}' "$url")
    # Check for success (HTTP 200-299)
    if [[ "$curl_reps" -ge 200 && "$curl_reps" -lt 300 ]]; then
      echo "✅ Active API documentation found at: $url (HTTP $curl_reps)"
      found_docs=1
      break
    else
      if [[ "$curl_reps" -eq 404 ]]; then
        not_found_docs=$((not_found_docs + 1))
        # echo "✖ Not found at: $url (HTTP $curl_reps)"
      else
        echo "✖ Not found at: $url (HTTP $curl_reps)"
      fi
    fi
  done

  if [ $found_docs -eq 0 ]; then
    echo "No active API documentation endpoint was found on $domain. (resp 404 :: $not_found_docs counts)"
    return 1
  fi
  return 0
}

######################################################################
##
## FUNCTIONS:: APT search
##
######################################################################
vm_sec_search_apt() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <[name|tool|location|raw]> <NAME>"
    return 1
  fi

  local vm_s_type="$1"
  local vm_apt_s="$2"
  local vm_apt_json_list='https://raw.githubusercontent.com/andreacristaldi/APTmap/master/apt.json'
  local vm_apt_file="$VM_SEC_LISTS_SECFILES/apt.json"

  # Create the directory if it doesn't exist
  mkdir -p "$VM_SEC_LISTS_SECFILES"

  # Check if the file doesn't exist or is older than 1 day (86400 seconds)
  if [ ! -f "$vm_apt_file" ] || [ "$(stat -c %Y "$vm_apt_file")" -lt "$(($(date +%s) - 86400))" ]; then
    echo "Downloading apt.json (file missing or older than one day)..."
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s -o "$vm_apt_file" "$vm_apt_json_list"
  fi

  case $vm_s_type in
  "name")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      (.name | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase)) \
      or \
      (.[\"other-names\"][] | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase)) \
      )]" "$vm_apt_file"
    ;;
  "tool")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets, \
      tools: (.tools[] | select(.value | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase))) \
      }]" "$vm_apt_file"
    ;;
  "location")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      ((.location | ascii_downcase) | contains(\"$vm_apt_s\" | ascii_downcase)) and (.location | length > 0) \
      )]" "$vm_apt_file"
    ;;
  "raw")
    cat "$vm_apt_file"
    ;;
  *)
    echo "Type to search is not known"
    echo "Usage: $0 <[name|tool|location|raw]> <NAME>"
    ;;
  esac
}

######################################################################
##
## FUNCTIONS:: MITRE technique search
##
######################################################################
vm_sec_search_mitre() {
  local USAGE="Usage: $0 <[short|detail|tactics|attacks|intrusion|malware]> (<SEARCH>)"
  local vm_s_type="$1"

  if [[ "$vm_s_type" == "tactics" ]]; then
    [ "$#" -lt 1 ] && {
      echo "$USAGE"
      return 1
    }
  else
    [ "$#" -lt 2 ] && {
      echo "$USAGE"
      return 1
    }
  fi

  local vm_mitre_s="$2"
  # local vm_mitre_json_list='https://raw.githubusercontent.com/mitre/cti/refs/heads/master/enterprise-attack/enterprise-attack.json'
  local vm_mitre_json_list='https://raw.githubusercontent.com/mitre-attack/attack-stix-data/refs/heads/master/enterprise-attack/enterprise-attack.json'
  local vm_mitre_file="$VM_SEC_LISTS_SECFILES/enterprise-attack.json"

  mkdir -p "$VM_SEC_LISTS_SECFILES"
  if [ ! -f "$vm_mitre_file" ] || [ "$(stat -c %Y "$vm_mitre_file")" -lt "$(($(date +%s) - 86400))" ]; then
    echo "Downloading enterprise-attack.json (file missing or older than one day)..."
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s -o "$vm_mitre_file" "$vm_mitre_json_list"
  fi

  local output
  case "$vm_s_type" in
  detail | tactics | intrusion | malware)
    output='{
        name: .name,
        type: .type,
        description: .description,
        ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
        ref_urls: ([.external_references[]? | select(has("url")) | .url]),
        ref_names: ([.external_references[]? | select(has("source_name")) | .source_name]),
        ref_descriptions: ([.external_references[]? | select(has("description")) | .description])
      }'
    ;;
  short | attacks)
    output='{
        name: .name,
        type: .type,
        ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
        ref_urls: ([.external_references[]? | select(has("url")) | .url] | .[0])
      }'
    ;;
  *)
    echo "Type to search is not known"
    echo "$USAGE"
    return 1
    ;;
  esac

  # Additional type filters for some modes.
  local type_filter=''
  local type_filter_reverse=''
  local type_filter_relation1=''
  local type_filter_relation2=''
  case "$vm_s_type" in
  tactics) type_filter=' and (.type | IN("x-mitre-tactic"))' ;;
  # attacks) type_filter=' and (.type | IN("attack-pattern"))' ;;
  attacks)
    type_filter=' and (.type | IN("attack-pattern"))'
    type_filter_reverse='"malware","tool","intrusion-set","course-of-action"'
    type_filter_relation1='target_ref'
    type_filter_relation2='source_ref'
    ;;
  intrusion)
    type_filter=' and (.type | IN("intrusion-set"))'
    type_filter_reverse='"malware","tool","course-of-action"'
    type_filter_relation1='source_ref'
    type_filter_relation2='target_ref'
    ;;
  malware)
    type_filter=' and (.type | IN("malware"))'
    type_filter_reverse='"intrusion-set","course-of-action"'
    type_filter_relation1='target_ref'
    type_filter_relation2='source_ref'
    ;;
  esac

  # Build a common search filter (search across name, description, external descriptions, and external IDs).
  # shellcheck disable=SC2016
  local common_filter='
    .objects[]
    | select(
        (
          ((.description // "") | ascii_downcase | contains($s | ascii_downcase))
          or
          ([.external_references[]? | (.description // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
          or
          ((.name // "") | ascii_downcase | contains($s | ascii_downcase))
          or
          ([.external_references[]? | (.external_id // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
        )
        and (.name != null)
        '$type_filter'
      )
  '

  jq --arg s "$vm_mitre_s" "$common_filter | $output" "$vm_mitre_file"

  # ---

  if [ -n "$type_filter_reverse" ]; then

    # shellcheck disable=SC2016
    # local output_extended='{
    #       base_ids: $base_ids,
    #       relation: $relation,
    #       final: ($final | map({
    #         name: .name,
    #         ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
    #       }))
    #     }'
    local output_extended='($final | map('$output'))'

    # shellcheck disable=SC2016
    local common_filter_extended='
      . as $root
      |
      # Base search: get IDs of objects matching the query.
      ($root.objects
        | map(select(
            (
              ((.description // "") | ascii_downcase | contains($s | ascii_downcase))
              or
              ([.external_references[]? | (.description // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
              or
              ((.name // "") | ascii_downcase | contains($s | ascii_downcase))
              or
              ([.external_references[]? | (.external_id // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
            )
            and (.name != null)
            '$type_filter'
          ))
        | map(.id)
        | unique
      ) as $base_ids

      |
      # First hop: find relationship objects whose source_ref is in the base IDs.
      ($root.objects
        | map(select(
            .type=="relationship"
            and has($r1)
            and (getpath([$r1]) | type=="string")
            and ( (getpath([$r1])) as $sr | ($base_ids | index($sr)) != null )
            # and (getpath([$r2]) | startswith($r))
          ))
        | map(getpath([$r2]))
        | unique
      ) as $relation

      |
      # Final lookup: get objects whose id is in the final IDs.
      ($root.objects
        | map(select(
            ( (.type) as $tt | ($r | index($tt)) != null )
            and has("id")
            and (.id | type=="string")
            and ( (.id) as $fid | ($relation | index($fid)) != null )
          ))
      ) as $final
    '

    jq \
      --arg s "$vm_mitre_s" \
      --arg r "$type_filter_reverse" \
      --arg r1 "$type_filter_relation1" \
      --arg r2 "$type_filter_relation2" \
      "$common_filter_extended | $output_extended" "$vm_mitre_file"
  fi
}

######################################################################
##
## FUNCTIONS:: EUVD/CVE search
##
######################################################################
vm_sec_search_vulns() {
  if [ "$#" -gt 0 ] && [ "$#" -lt 2 ]; then
    echo "Usage: $0 [euvd|cve] <ID>"
    return 1
  fi

  local vm_s_type=""
  local vm_s_id=""
  local merged_json

  if [ "$#" -eq 2 ]; then
    vm_s_type="$1"
    vm_s_id="$2"
  fi

  # NOTE: https://euvd.enisa.europa.eu/apidoc
  local vm_vuln_api='https://euvdservices.enisa.europa.eu/api/vulnerabilities?size=100&fromScore=6&toScore=10&exploited=true'
  case $vm_s_type in
  "euvd")
    vm_vuln_api="https://euvdservices.enisa.europa.eu/api/enisaid?id=$vm_s_id"
    merged_json=$(curl -s "$vm_vuln_api" | jq '[.]')
    echo "Will search '$vm_s_type' as '$vm_s_id' with '$vm_vuln_api'"
    ;;
  "cve")
    vm_vuln_api="https://euvdservices.enisa.europa.eu/api/vulnerability?id=$vm_s_id"
    echo "Will search '$vm_s_type' as '$vm_s_id' with '$vm_vuln_api'"
    merged_json=$(curl -s "$vm_vuln_api" | jq '[.]')
    ;;
  *)
    vm_vuln_api='https://euvdservices.enisa.europa.eu/api/vulnerabilities?size=100&fromScore=6&toScore=10&exploited=true'
    merged_json=$(curl -s "$vm_vuln_api" | jq '.items')
    ;;
  esac

  # local vm_vuln_q_list1="https://euvdservices.enisa.europa.eu/api/exploitedvulnerabilities"
  # local vm_vuln_q_list2="https://euvdservices.enisa.europa.eu/api/criticalvulnerabilities"
  # local vm_vuln_q_list3="https://euvdservices.enisa.europa.eu/api/lastvulnerabilities"
  # merged_json=$(jq -s 'add' <(curl -s "$vm_vuln_q_list1") <(curl -s "$vm_vuln_q_list2") <(curl -s "$vm_vuln_q_list3"))

  # Filter the required fields and pretty print
  jq -r '
    .[] | {
      id,
      enisa_id,
      status,
      datePublished,
      dateUpdated,
      baseScore,
      epss,
      aliases,
      description
    }
  ' <<<"$merged_json"
}
