#!/usr/bin/env bash

### COLOR ### (https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux)
NC='\033[0m'         # No Color
BRED='\033[1;31m'    # Red
BPURPLE='\033[1;35m' # Purple

### PY & ANSIBLE ###
export PY_COLOR=1
export ANSIBLE_FORCE_COLOR=1

### ZSH ###
if command -v zsh &>/dev/null && [ -n "$ZSH_NAME" ]; then
  setopt NO_NOMATCH
fi

### BASH ###
export HISTTIMEFORMAT="%F %T "
alias sudo-env='sudo -E env "PATH=$PATH"'

### EDITOR ###
if command -v nvim &>/dev/null; then
  export EDITOR='nvim'
  export SUDO_EDITOR="nvim"
else
  export EDITOR='vim'
  export SUDO_EDITOR="vim"
fi

######################################################################
##
## HELPER
##
######################################################################
addToPath() {
  if [[ ":$PATH:" != *":$1:"* ]]; then
    export PATH="$PATH:$1"
  fi
}
addToPathFront() {
  if [[ ":$PATH:" != *":$1:"* ]]; then
    export PATH="$1:$PATH"
  fi
}

######################################################################
##
## set PATH so it includes user's private bin if it exists
##
######################################################################
addToPathFront "$HOME/.local/bin"
if [ -d /etc/zsh/profile.d ]; then
  if ls /etc/zsh/profile.d/*.sh 1>/dev/null 2>&1; then
    for i in /etc/zsh/profile.d/*.sh; do
      if [ -r "$i" ]; then
        # shellcheck disable=SC1090
        . "$i"
      fi
    done
    unset i
  fi
fi

######################################################################
##
## set PATH for dev env
##
######################################################################
export GOPATH="$HOME/.go"
addToPath "/usr/local/go/bin"
addToPath "$GOPATH/bin"

NPM_PACKAGES="${HOME}/.npm-packages"
if [[ ":$PATH:" != *":$NPM_PACKAGES/share/man:"* ]]; then
  export MANPATH="${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man"
fi
addToPathFront "/snap/node/current/bin"
addToPath "$NPM_PACKAGES/bin"

export GEM_HOME="$HOME/.gems"
addToPath "$GEM_HOME/bin"

export RUSTUP_HOME="$HOME/.rustup"
# addToPath "$RUSTUP_HOME/bin"

######################################################################
##
## set ALIASES
##
######################################################################
### SSH ###
vm_ssh_xterm() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <SSH_HOST>"
    return 1
  fi

  infocmp -x | ssh "$1" -- tic -x -
}

### LS as EZA ###
if command -v eza &>/dev/null; then
  alias ls='eza --color=always --git'
fi
alias l='ls -a1'
alias ll='ls -aalhg'
alias lg='ll --grid'
alias llm='ll -t modified -s modified'
alias lla='ll -t accessed -s accessed'
alias llc='ll -t created -s created'
alias ld='ls -ld .*'
alias tree='ls -TlL 4'

### CAT as BAT ###
alias catt='batcat -p -P --color always'
alias catt-b='batcat -P --color always'

### CP as RSYNC ###
alias cp-r='rsync --info=progress2 -auz --stats'
alias cp-ra='rsync --info=progress2 -az --stats'
alias scp-r='rsync --info=progress2 -auz -e "ssh -T -o Compression=no -x"'
alias scp-ra='rsync --info=progress2 -az -e "ssh -T -o Compression=no -x"'

### FIND ###
alias find-no='sudo /usr/bin/find / -nouser -o -nogroup -ls 2>/dev/null'
find-g() {
  sudo /usr/bin/find / \
    -not -regex '/home/.*' \
    -not -regex '/mnt/.*' \
    -not -regex '/media/.*' \
    -not -regex '.*/\.cache/.*' \
    -not -regex '/proc/.*' \
    -not -regex '/sys/.*' \
    -not -regex '/var/log/.*' \
    -newermt "-${1:-5} minute" -ls 2>/dev/null
}
find-l() {
  /usr/bin/find "${2:-.}" \
    -not -regex "${3:-x}" \
    -newermt "-${1:-5} minute" -ls 2>/dev/null
}

### DOCKER ###
alias docker='DOCKER_BUILDKIT=1 docker'
alias docker-compose='docker compose'
alias docker-swarm-compose='docker compose --compatibility config | sed '\''s|cpus: \([0-9]\+\(\.[0-9]\+\)*\)|cpus: "\1"|'\'' | sed '\''1{/^name:/d}'\'' | sed '\''s/published: "\(.*\)"/published: \1/'\'' | sed '\''s|mode: "\([0-9]\+\)"|mode: \1|'\'' | docker stack deploy --resolve-image=never --with-registry-auth --detach=false --compose-file -'
alias docker-swarm='docker compose --compatibility config | sed '\''s|cpus: \([0-9]\+\(\.[0-9]\+\)*\)|cpus: "\1"|'\'' | sed '\''1{/^name:/d}'\'' | sed '\''s/published: "\(.*\)"/published: \1/'\'' | sed '\''s|mode: "\([0-9]\+\)"|mode: \1|'\'' | docker stack deploy --resolve-image=always --with-registry-auth --detach=false --compose-file -'

docker-swarm-compose2() {
  local COMPOSE_FILE="docker-compose.yaml"
  if [ $# -gt 1 ]; then
    COMPOSE_FILE="$1"
    shift
  fi

  echo "Using compose file: $COMPOSE_FILE"
  docker compose --file "$COMPOSE_FILE" --compatibility config |
    sed 's|cpus: \([0-9]\+\(\.[0-9]\+\)*\)|cpus: "\1"|' |
    sed '1{/^name:/d}' |
    sed 's/published: "\(.*\)"/published: \1/' |
    docker stack deploy --resolve-image=never --with-registry-auth --detach=false --compose-file - "$@"
}

docker-context() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <CONTEXT-NAME> <SSH-HOST>"
    return 1
  fi
  docker context create "$1" --docker "host=ssh://$2"
}
# alias docker-swarm-compose='docker compose --compatibility config --format json | jq '\''del(.name) | .services |= map_values(.deploy.resources.limits.cpus |= tostring | .deploy.resources.reservations.cpus |= tostring | if .ports then .ports |= map(.published |= tonumber) else . end | if .devices then .devices |= map("\(.source):\(.target)") else . end) | walk(if type == "object" then with_entries(select(.value != null)) else . end)'\'' | yq -P | docker stack deploy --resolve-image=never --with-registry-auth --detach=false --compose-file -'

# shellcheck disable=SC2139
alias vm_quick_docker_ubuntu="mkdir -p ${HOME}/docker/$(date +'%Y-%m-%d') && docker run -it --rm --network host --user root -v ${HOME}/docker/$(date +'%Y-%m-%d'):/tmp/docker --name=ubuntu-server ubuntu:24.04"
alias vm_quick_docker_iperf="docker run -d -it --rm --name=iperf3-server -p 5201:5201 networkstatic/iperf3 -s"

### KUBERNETES ###
alias h='helm'
alias k='kubectl'
alias kn='k config set-context --current --namespace'
alias ka='kubectl apply -f'
alias kg='kubectl get'
alias kd='kubectl describe'
alias kdel='kubectl delete'
alias kl='kubectl logs -f'
alias kgpo='kubectl get pod'
alias kgd='kubectl get deployments'
alias kc='kubectx'
alias kns='kubens'
alias ke='kubectl exec -it'
alias kcns='kubectl config set-context --current --namespace'

### TERRAFORM ###
alias tf='terraform'

### ZED ###
if command -v flatpak &>/dev/null; then
  alias zed-editor='flatpak run dev.zed.Zed'
fi

### PYTHON TOOLS ###
alias vm_url_decode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'
alias vm_url_encode='python3 -c "import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))"'
alias vm_reverse='python3 -c "import sys; print(sys.argv[1][::-1])"'

alias vm_hun_to_min="python3 -c 'import sys;x = sys.argv[1].split(\":\");x3 = (int(x[0]) * 60) + ((int(x[1])/100)*60);print(x3, \":: \", f\"{divmod(x3, 60)[0]}h : {divmod(x3, 60)[1]}m\")'"

# $sudo apt install xclip
# $pip3 install pyperclip
alias vm_copy_from_clip='python3 -c "import sys, pyperclip; pyperclip.copy(sys.argv[1])"'

### TMUX ###
alias vm_tl='tmux ls'
alias vm_ta='tmux attach -t'
alias vm_tk='tmux kill-session -t'

### VIM ###
if command -v nvim &>/dev/null; then
  alias vim=nvim
fi

### updater ###
alias vm_up_apt='sudo /usr/bin/apt update && sudo /usr/bin/apt upgrade'
alias vm_up_snap='sudo /usr/bin/snap refresh'
alias vm_up_flatpak='/usr/bin/flatpak update && /usr/bin/flatpak uninstall --unused'
alias vm_up_py_pip='python3 -m pip list --user -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | xargs -n1 python3 -m pip install --user --no-cache-dir -U --break-system-packages'
alias vm_up_py_pip_root='sudo /usr/bin/python3 -m pip list -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | sudo /usr/bin/xargs -n1 python3 -m pip install --no-cache-dir -U --break-system-packages'
vm_update_clean_all() {
  print_separator() {
    echo -e '\n#########################################################################\n'
  }

  # Consolidated repetitive update and cleanup logic into a single function.
  update_and_clean() {
    local tool="$1"
    local update_cmd="$2"
    local clean_cmd="$3"

    echo -e "${BPURPLE}Updating $tool...${NC}"
    if eval "$update_cmd"; then
      echo -e "${BPURPLE}$tool update completed.${NC}"
    else
      echo -e "${BRED}$tool update failed.${NC}" >&2
    fi

    echo -e "${BPURPLE}Cleaning $tool...${NC}"
    if eval "$clean_cmd"; then
      echo -e "${BPURPLE}$tool cleanup completed.${NC}"
    else
      echo -e "${BRED}$tool cleanup failed.${NC}" >&2
    fi
  }

  update_and_clean "apt" "sudo apt update && sudo apt full-upgrade -y" "sudo apt autoclean -y && sudo apt autoremove -y && sudo apt clean"
  print_separator
  update_and_clean "snap" "sudo snap refresh" "LANG=en_US.UTF-8 sudo snap list --all | awk '/disabled/ {print \$1, \$3}' | while read -r SNAPNAME REVISION; do sudo snap remove \"\$SNAPNAME\" --revision=\"\$REVISION\"; done"
  print_separator
  update_and_clean "flatpak" "sudo flatpak update" "sudo flatpak uninstall --unused && sudo rm -rfv /var/tmp/flatpak-cache-*"
  print_separator

  echo -e "You could also run additional updates:"
  echo -e "  - run ${BPURPLE}'vm_up_py_pip'${NC} to update Python pip installs by user."
  echo -e "  - run ${BRED}'vm_up_py_pip_root'${NC} to update Python pip installs by root (be cautious, could potentially break things)."
}

### OTHER ###
alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS}'

alias pigz='pigz -k -p$(nproc)'
tar-p() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <directory> [<password | 'pw'>]"
    return 1
  fi

  PATH_TO_ENC="$1"
  if [ $# -eq 1 ]; then
    echo "disabled"
    tar --use-compress-program="pigz " -cpf "$(basename "$PATH_TO_ENC").tar.gz" -C "$PATH_TO_ENC" .
  elif [ $# -eq 2 ]; then
    PASSWORD_FOR_ENC="$2"
    [[ "$PASSWORD_FOR_ENC" == "pw" ]] && { # pragma: allowlist secret
      echo "Password: "
      read -rs PASSWORD_FOR_ENC
    }
    tar --use-compress-program="pigz " -cpf - -C "$PATH_TO_ENC" . | gpg -c --cipher-algo AES256 --batch --passphrase "$PASSWORD_FOR_ENC" -o "$(basename "$PATH_TO_ENC").tar.gz.gpg.enc"
  fi
}
untar-p() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <encrypted_file> <password | 'pw'>"
    return 1
  fi

  PATH_TO_DEC="$1"
  PASSWORD_FOR_DEC="$2"
  [[ "$PASSWORD_FOR_DEC" == "pw" ]] && { # pragma: allowlist secret
    echo "Password: "
    read -rs PASSWORD_FOR_DEC
  }

  mkdir -p "$(dirname "$PATH_TO_DEC")/${PATH_TO_DEC%%.*}"
  gpg -d --batch --passphrase "$PASSWORD_FOR_DEC" "$PATH_TO_DEC" | tar --use-compress-program="pigz " -xpf - -C "$(dirname "$PATH_TO_DEC")/${PATH_TO_DEC%%.*}"
}

alias vm_mem_free='free -h && sudo /usr/bin/sysctl -w vm.drop_caches=3 && sudo /usr/bin/sync && echo 3 | sudo /usr/bin/tee /proc/sys/vm/drop_caches && free -h'

alias t='tail -f'
alias du-l='du -hs * .* 2>/dev/null | sort -h'
alias du-g='du -hs /boot /dev /etc /home /opt /root /snap /srv /sys /tmp /usr /var 2>/dev/null | sort -h'
alias ip='ip -c'

alias chmod_ux="chmod u+x"
alias vm_ux_term="tr -d '\r' <"

alias vm_random='openssl rand -base64'
vm_random2() {
  tr -dc A-Za-z0-9 </dev/urandom | head -c "$1"
  echo ''
}
alias vm_find_command='apropos'

vm_quick_android_emulator() {
  local android_path="${VM_ANDROID_PATH:-$HOME/.android}"
  selected_emulator=$("${android_path}/Sdk/emulator/emulator" -list-avds | grep -v INFO | fzf)
  if [[ -z "$selected_emulator" ]]; then
    echo "No emulator selected."
    return 1
  fi
  # avdmanager create avd -n <new_avd_name> -k "system-images;android-<version>;google_apis;x86"

  QT_QPA_PLATFORM=xcb "${android_path}/Sdk/emulator/emulator" \
    -cores 4 -memory 4096 \
    -no-snapshot-load -no-snapshot -no-snapshot-save -no-snapstorage \
    -no-boot-anim -no-audio \
    -writable-system -gpu host \
    -avd "$selected_emulator" "$@" 1>/dev/null
}

### TOOLS ###
alias vm_weather='curl https://wttr.in/${VM_WEATHER_LOCATION:-Stuttgart},${VM_WEATHER_COUNTRY:-de}'
alias vm_speed='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 - --secure'
alias vm_speed_local='clear && iperf3 -p 5201 -Tl1 -4 -b0 -i3 -O1 -P1 -w128m -t0 -c'
# https://github.com/R0GGER/public-iperf3-servers | https://iperf.fr/iperf-servers.php
vm_speed_pub() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <NUM> [ADDITIONAL_IPERF3_PARAMS... (-w128M | -R | -t0)]"
    return 1
  fi

  local servers=(
    "a209.speedtest.wobcom.de:5201" # 1
    "a205.speedtest.wobcom.de:5201" # 2
    "speedtest.lu.buyvm.net:5201"   # 3
    "iperf3.moji.fr:5201"           # 4
    "ping.online.net:5001"          # 5 change
    "speedtest.init7.net:5201"      # 6
    "speedtest.shinternet.ch:5200"  # 7
    "speedtest.serverius.net:5002"  # 8 change
  )

  local num="$1"
  shift
  if ! [[ "$num" =~ ^[0-9]+$ ]] || [ "$num" -lt 1 ] || [ "$num" -gt "${#servers[@]}" ]; then
    num=1
  fi

  local entry="${servers[$((num))]}"
  local server="${entry%%:*}" # Extract server name (before :)
  local port="${entry##*:}"   # Extract port number (after :)

  clear
  iperf3 -c "$server" -p "$port" -Ts1 -b0 -i3 -O1 -P1 "$@"
}

######################################################################
##
## ii: display useful host related information
##
######################################################################
alias vm_my_ip='curl -s ifconfig.io/ip'
alias vm_my_host='curl -s ifconfig.io/host'
alias vm_my_country='curl -s ifconfig.io/country_code'
alias vm_my_ua='curl -s ifconfig.io/ua'
alias vm_my_all='curl -s ifconfig.io/all.json | jq'
vm_my_bios() {
  for d in bios-vendor bios-version bios-release-date bios-revision system-manufacturer system-product-name system-version system-family system-serial-number baseboard-manufacturer baseboard-product-name baseboard-version processor-family processor-manufacturer processor-version processor-frequency; do
    printf "  - %-25s: %s\n" "$d" "$(sudo /usr/sbin/dmidecode -s "$d")"
  done
}

vm_ii() {
  echo -e "\\n${BRED}You are logged on:$NC $(hostname)"
  echo -e "\\n${BRED}Additional information:$NC"
  echo -e "  - description           : $(lsb_release -d | cut -d':' -f2- | xargs)"
  echo -e "  - kernel name           : $(uname -s)"
  echo -e "  - network node hostname : $(uname -n)"
  echo -e "  - kernel release        : $(uname -r)"
  echo -e "  - kernel version        : $(uname -v)"
  echo -e "  - machine hardware name : $(uname -m)"
  echo -e "  - processor type        : $(uname -p)"
  echo -e "  - hardware platform     : $(uname -i)"
  echo -e "  - operating system      : $(uname -o)"
  echo -e "  - secure boot status    : $(mokutil --sb-state 2>/dev/null || echo "Not available")"

  echo -e "\\n${BRED}Users logged on:$NC"
  echo "  $(w -h)"

  echo -e "\\n${BRED}Current date:$NC"
  echo "  $(date)"

  echo -e "\\n${BRED}Machine stats:$NC"
  echo "  $(uptime | xargs)"

  echo -e "\\n${BRED}Machine BIOS:$NC"
  vm_my_bios
  echo -e "\\n${BRED}CPU:$NC"
  # https://github.com/platomav/CPUMicrocodes/tree/master/AMD
  echo -e "  - microcode : $(grep microcode /proc/cpuinfo | head -n1 | cut -d":" -f2 | xargs)"
  echo -e "  - family    : $(grep 'cpu family' /proc/cpuinfo | head -n1 | cut -d":" -f2 | xargs)"
  echo -e "  - model     : $(grep -oP 'model\s*:\s*\K\d+' /proc/cpuinfo | head -n1 | cut -d":" -f2 | xargs)"
  echo -e "  - stepping  : $(grep stepping /proc/cpuinfo | head -n1 | cut -d":" -f2 | xargs)"

  echo -e "\\n${BRED}Public facing IP Address:$NC"
  echo "  $(vm_my_ip)"
  echo "  $(vm_my_host)"
  echo "  $(vm_my_country)"
  echo "  $(vm_my_ua)"
  echo
}

######################################################################
##
## git:
## - some aliases :: pretty logs, pre-commit, diff, re-init for changed .gitignore
## - search in git commits
## - check outdated git repos
##
######################################################################
alias vm_git_log1="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias vm_git_log2="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

alias vm_git_pre='pre-commit run --files $(git ls-files | tr "\n" " ")'
alias vm_git_rei='git rm -r --cached . && git add . && git commit -m "refactor: reapply .gitignore rules"'

vm_git_diff() {
  if command -v delta >/dev/null 2>&1; then
    git diff --color=always "$@" | delta --dark --line-numbers
  else
    git difftool --tool=nvimdiff "$@"
  fi
}

vm_git_commit_search2() {
  # shellcheck disable=SC2016
  git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index \
      --bind=ctrl-s:toggle-sort \
      --preview 'git show --color=always $(echo {} | grep -o "[a-f0-9]\{7\}" | head -1)' \
      --header "enter to view, ctrl-o to checkout" \
      --bind "q:abort,ctrl-f:preview-page-down,ctrl-b:preview-page-up" \
      --bind "ctrl-o:become:(echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs git checkout)" \
      --bind "ctrl-m:execute:(
          echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
          xargs -I % sh -c 'git show --color=always % | less -R'
      )" \
      --preview-window=right:60%
}

vm_git_check_updates() {
  # Counter for outdated repositories
  local outdated_found=0
  local only_relevant=1

  # Use process substitution to avoid subshell issues with while-read loops
  while IFS= read -r git_dir; do
    # Get the repository root directory (parent directory of .git)
    local repo_dir=""
    repo_dir=$(dirname "$git_dir")
    [ "$only_relevant" == 0 ] && echo ""
    [ "$only_relevant" == 0 ] && echo "🔍 Checking repository: $repo_dir"

    # Change into the repository directory safely.
    pushd "$repo_dir" >/dev/null || {
      echo "  🔴 Failed to enter directory: $repo_dir"
      continue
    }

    # Check if the current branch has an upstream configured.
    if git rev-parse --abbrev-ref --symbolic-full-name "@{u}" >/dev/null 2>&1; then
      # Update remote tracking information quietly.
      git fetch --quiet

      # Count commits that the local branch is behind its upstream.
      local behind=0
      behind=$(git rev-list --count HEAD.."@{u}" 2>/dev/null)
      if [ "$behind" -gt 0 ]; then
        local remote_commit_info=""
        local repo_part=""
        local remote_url=""
        local commit_link=""

        # Get a one-line summary (hash and message) from the upstream tip commit.
        remote_commit_info=$(git log -1 --pretty=format:"%h %s" "@{u}")

        # Determine a link to the latest commit if the remote is on GitHub.
        remote_url=$(git remote get-url origin 2>/dev/null)

        if [[ $remote_url == *"github.com"* ]]; then
          # Extract the "user/repo" part using parameter expansion.
          if [[ $remote_url == git@github.com:* ]]; then
            repo_part=${remote_url#git@github.com:}
          elif [[ $remote_url == https://github.com/* ]]; then
            repo_part=${remote_url#https://github.com/}
          else
            repo_part=""
          fi

          # Remove a trailing ".git" or slash if present.
          repo_part=${repo_part%.git}
          repo_part=${repo_part%/}

          if [[ -n "$repo_part" ]]; then
            commit_link="https://github.com/${repo_part}/commit/$(git log -1 --pretty=format:"%H" "@{u}")"
          else
            commit_link="N/A"
          fi
        else
          commit_link="N/A"
        fi

        echo "  🔺 $repo_dir: $remote_commit_info (behind by $behind commit(s))"
        echo "    🔗 Latest commit link: $commit_link"
        outdated_found=$((outdated_found + 1))
      fi
    else
      echo "  ⛔ No upstream branch configured for $repo_dir"
    fi

    # Return to the previous directory; exit/return if popd fails.
    popd >/dev/null || {
      echo "  🔴 popd failed for $repo_dir, exiting." >&2
      return 1
    }
  done < <(find . -type d -name ".git" -prune)

  echo ""
  if [ "$outdated_found" -eq 0 ]; then
    echo "✅ No outdated projects found."
  else
    echo "🛠️ Total outdated projects: $outdated_found"
  fi
}

######################################################################
##
## OpenShift: (oc) Helper Functions
##
######################################################################

# Alias to quickly view the current project
alias ocp='oc project'

# Switch projects interactively using fzf
vm_oc_switch() {
  local project
  project=$(oc projects -q | fzf --prompt="Select project: ")
  if [ -z "$project" ]; then
    echo "No project selected."
    return 1
  fi
  oc project "$project"
}

# Follow logs for a selected pod (interactive selection via fzf)
vm_oc_logs() {
  local pod
  pod=$(oc get pods --no-headers 2>/dev/null | fzf --prompt="Select pod for logs: " | awk '{print $1}')
  if [ -z "$pod" ]; then
    echo "No pod selected."
    return 1
  fi
  oc logs -f "$pod"
}

vm_oc_logs_search() {
  local pod container containers

  # Select a pod using fzf
  pod=$(oc get pods --no-headers 2>/dev/null | fzf --prompt="Select pod for logs: " | awk '{print $1}')
  if [ -z "$pod" ]; then
    echo "No pod selected."
    return 1
  fi

  # Check if the selected pod has multiple containers and prompt for one if so.
  containers=$(oc get pod "$pod" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)
  if [ "$(echo "$containers" | wc -w)" -gt 1 ]; then
    container=$(echo "$containers" | tr ' ' '\n' | fzf --prompt="Select container: ")
  fi

  echo "Streaming logs for pod '$pod'${container:+ (container: $container)}. Press Ctrl-C to exit."

  # Tail the logs and pipe them to fzf for interactive searching.
  if [ -n "$container" ]; then
    oc logs -f "$pod" -c "$container" 2>&1 | fzf --ansi --cycle
  else
    oc logs -f "$pod" 2>&1 | fzf --ansi --cycle
  fi
}

# Open an interactive shell in a selected pod's container
vm_oc_shell() {
  local pod container containers
  pod=$(oc get pods --no-headers 2>/dev/null | fzf --prompt="Select pod for shell: " | awk '{print $1}')
  if [ -z "$pod" ]; then
    echo "No pod selected."
    return 1
  fi

  # Retrieve container names for the pod
  containers=$(oc get pod "$pod" -o jsonpath='{.spec.containers[*].name}')
  if [[ $(echo "$containers" | wc -w) -gt 1 ]]; then
    container=$(echo "$containers" | tr ' ' '\n' | fzf --prompt="Select container: ")
  fi

  # Try bash first, fallback to sh if bash is unavailable
  if [ -n "$container" ]; then
    oc exec -it "$pod" -c "$container" -- bash 2>/dev/null || oc exec -it "$pod" -c "$container" -- sh
  else
    oc exec -it "$pod" -- bash 2>/dev/null || oc exec -it "$pod" -- sh
  fi
}

# Describe a resource interactively.
vm_oc_describe() {
  local resource_type resource

  # List of common resource types. Extend this list as needed.
  local resource_types=("pods" "svc" "deployment" "dc" "route" "configmap" "secret" "pvc" "buildconfig")

  resource_type=$(printf "%s\n" "${resource_types[@]}" | fzf --prompt="Select resource type: ")
  if [ -z "$resource_type" ]; then
    echo "No resource type selected."
    return 1
  fi

  resource=$(oc get "$resource_type" --no-headers 2>/dev/null | fzf --prompt="Select $resource_type: " | awk '{print $1}')
  if [ -z "$resource" ]; then
    echo "No $resource_type selected."
    return 1
  fi

  oc describe "$resource_type" "$resource"
}

# Additional example: Follow logs for a deployment config (dc)
vm_oc_dc_logs() {
  local dc
  dc=$(oc get dc --no-headers 2>/dev/null | fzf --prompt="Select deployment config: " | awk '{print $1}')
  if [ -z "$dc" ]; then
    echo "No deployment config selected."
    return 1
  fi
  oc logs -f dc/"$dc"
}

######################################################################
##
## markdown to csv or pdf converts
##
######################################################################
vm_convert_md_to_csv() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <MARKDOWN_FILE>"
    return 1
  fi

  sed '2d' "$1" | sed '2d' | sed -e 's/^| //' -e 's/ |$//' -e 's/ | /,/g' |
    awk -F, '{
      for (i=1; i<=NF; i++) {
        gsub(/^ *| *$/, "", $i);  # Remove leading and trailing spaces
        if (i > 1) printf ",";
          #$i = "\"" $i "\"";     # Sourund with double quote
          printf "%s", $i;
        }
        printf "\n";
      }' >"$(basename "$1" | cut -d. -f1).csv"
}

vm_convert_md_to_pdf() {
  if [ -z "$1" ]; then
    echo "Usage: $0 <MARKDOWN_FILE>"
    return 1
  fi

  local input_file="$1"
  local cur_date
  local filename
  local template_path="${2:-$HOME/.config/templates/eisvogel.latex}"
  # local template_url="https://raw.githubusercontent.com/Wandmalfarbe/pandoc-latex-template/refs/heads/master/template-multi-file/eisvogel.latex"
  local template_url="https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.1.0/Eisvogel.tar.gz"

  # Check if the template file exists, if not, download it
  if [ ! -f "$template_path" ]; then
    mkdir -p "$(dirname "$template_path")"
    echo "Template not found locally. Downloading from URL..."
    if ! curl -sf -o "$template_path" "$template_url"; then
      echo "Error: Failed to download the template from '$template_url'."
      return 1
    fi
    echo "Template downloaded successfully."
  fi

  # Check if the input file exists
  if [ ! -f "$input_file" ]; then
    echo "Error: '$input_file' does not exist."
    return 1
  fi

  # Check if pandoc is installed
  if ! command -v pandoc &>/dev/null; then
    echo "Error: pandoc is not installed."
    return 1
  fi

  cur_date=$(date +"%Y-%m-%d")
  filename=$(basename "$input_file" | cut -f 1 -d ".")

  # Check if fc-list command is available
  if ! command -v fc-list &>/dev/null; then
    echo "Error: fc-list is not installed."
    return 1
  fi

  # Font list and checking for available fonts
  local main_font="DejaVu Sans Mono"
  local font_list=("FiraMono Nerd Font Mono" "Hack Nerd Font Mono" "ProggyCleanTTSZ Nerd Font Mono" "TerminessTTF Nerd Font Mono" "JetBrains Mono" "Fira Code" "Consolas" "Courier New")

  for font_check in "${font_list[@]}"; do
    if fc-list | grep -iq "$font_check"; then
      main_font=$font_check
      break
    fi
  done
  echo "Using font: $main_font"

  # Run pandoc to convert markdown to PDF
  pandoc "$input_file" \
    -o "${filename}.pdf" \
    --from markdown \
    --template "$template_path" \
    --pdf-engine=xelatex \
    --listings \
    -V lang=en-GB \
    -V classoption=onside \
    -V book \
    -V date="$cur_date" \
    -V "mainfont:$main_font" \
    -V 'sansfont:DejaVuSans' \
    -V 'monofont:DejaVuSansMono' \
    -V 'mathfont:TeXGyreDejaVuMath-Regular'
}

vm_convert_docs_to_md() {
  if [ -z "$1" ]; then
    echo "Usage: $0 <DOC_FILE | DOC_URL>"
    echo "  - Supported formats: https://docling-project.github.io/docling/usage/supported_formats/"
    return 1
  fi

  python3 -m venv .venv
  # shellcheck disable=SC1091
  source .venv/bin/activate
  python3 -m pip install docling

  docling --image-export-mode referenced "$1"
}

######################################################################
##
##
##
######################################################################
vm_convert_video() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <VIDEO>"
    return 1
  fi

  local input="$1"
  local output="${input%.*}.mp4"

  local codec="libx265" # libx264 | libx265
  local quality=32      # Lower quality for better file size
  local fps=60

  ffmpeg -y -i "$input" \
    -vaapi_device /dev/dri/renderD128 \
    -vf "scale=ceil(iw/2)*2:ceil(ih/2)*2" \
    -map 0:0 -c:v "$codec" \
    -map 0:a? -c:a copy \
    -crf "$quality" \
    -pix_fmt yuv420p \
    -preset fast \
    -r "$fps" \
    "$output"
}

vm_convert_gif() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <VIDEO>"
    return 1
  fi

  local input="$1"
  local output="${input%.*}.gif"
  local temp_video="${input%.*}.mp4"
  local palette="/tmp/palette.png"

  local codec="libx265" # libx264 | libx265
  local quality=32      # Lower quality for better file size
  local fps=10          # Reduce fps to optimize GIF size
  local scale=320       # Lower resolution for smaller GIF size

  ffmpeg -y -i "$input" \
    -vaapi_device /dev/dri/renderD128 \
    -vf "scale=ceil(iw/2)*2:ceil(ih/2)*2" \
    -map 0:0 -c:v "$codec" \
    -map 0:a? -c:a copy \
    -crf "$quality" \
    -pix_fmt yuv420p \
    -preset fast \
    -r 30 \
    "$temp_video"

  ffmpeg -y -i "$temp_video" -vf "fps=$fps,scale=$scale:-1:flags=lanczos,palettegen=stats_mode=diff" "$palette"
  ffmpeg -y -i "$temp_video" -i "$palette" -filter_complex "fps=$fps,scale=$scale:-1:flags=lanczos[x];[x][1:v]paletteuse" "$output"

  rm "$palette"
}

######################################################################
##
## quick ubuntu: create and remove multipass ubuntu VM
##
######################################################################
vm_quick_ubuntu() {
  if [[ -z "$1" ]]; then
    echo "Usage: $0 <VM_NAME_VERSION> [<optional post-creation command>]"
    return 1
  fi

  TMP_CLOUD_INIT=~/vm_quick_ubuntu_cloud_init.yaml
  {
    echo '#cloud-config'
    echo 'packages_update: true'
    echo 'packages_upgrade: true'
    echo 'packages:'
    echo '  - cowsay'
    echo '  - neofetch'
    echo 'ssh_authorized_keys:'
    echo '  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJOBsi+JPb9GLFKA83kRpaphBrvb2uM9r0U0S+SPx1Mo ansible-admin'
  } >"$TMP_CLOUD_INIT"

  # Clean up VM name by removing dots and replacing colons with hyphens
  VM_NAME_VERSION=$(echo "$1" | sed 's|\.||g' | tr ':' '-')

  # Launch the VM with multipass
  multipass launch "$1" -n "ubuntu-$VM_NAME_VERSION" -c 2 -d 16G -m 4G --cloud-init "$TMP_CLOUD_INIT" || {
    echo "Failed to launch VM."
    rm "$TMP_CLOUD_INIT"
    return 1
  }

  # Remove cloud-init file after VM creation
  rm "$TMP_CLOUD_INIT"

  # Run an optional post-creation command, default to 'neofetch' if not provided
  multipass exec "ubuntu-$VM_NAME_VERSION" -- sh -c "${2:-neofetch}"
}

vm_quick_ubuntu_rm() {
  if [[ -z "$1" ]]; then
    echo "Usage: $0 <VM_NAME_VERSION>"
    return 1
  fi

  # Clean up VM name
  VM_NAME_VERSION=$(echo "$1" | sed 's|\.||g' | tr ':' '-')

  # Stop, delete, and purge the VM
  multipass stop "ubuntu-$VM_NAME_VERSION" || {
    echo "Failed to stop VM."
    return 1
  }
  multipass delete "ubuntu-$VM_NAME_VERSION" || {
    echo "Failed to delete VM."
    return 1
  }
  multipass purge || {
    echo "Failed to purge VM resources."
    return 1
  }

  # Show current list of VMs
  multipass list
}

######################################################################
##
## Create a shortcut for an AppImage with a PNG icon.
##
######################################################################
vm_shortcut_appimage() {
  if [[ "$#" -ne 3 ]]; then
    echo "Usage: $0 <NAME> <APPIMAGE> <PNG>" >&2
    return 1
  fi

  # Parameters
  local name="$1"
  local appimage="$2"
  local image_png="$3"
  local install_dir="/opt/${name}"
  local desktop_entry="/usr/share/applications/${name}.desktop"

  # Create necessary directories and move files
  sudo mkdir -p "$install_dir" || {
    echo "Failed to create directory $install_dir"
    return 1
  }
  sudo mv "$appimage" "$install_dir/${name}.AppImage" || {
    echo "Failed to move AppImage file"
    return 1
  }
  sudo mv "$image_png" "$install_dir/${name}.png" || {
    echo "Failed to move PNG file"
    return 1
  }

  # Set the correct owner and permissions
  sudo chown -R root:root "$install_dir"
  sudo chmod -R 755 "$install_dir"
  sudo chmod 644 "$install_dir/${name}.png"

  # Create Desktop Entry with indentation using printf and tee
  printf "[Desktop Entry]\n\
    Name=%s\n\
    Exec=%s/%s.AppImage\n\
    Icon=%s/%s.png\n\
    Comment=%s\n\
    Type=Application\n\
    Terminal=false\n\
    Encoding=UTF-8\n\
    Categories=Utility;\n" \
    "$name" "$install_dir" "$name" "$install_dir" "$name" "$name" |
    sudo tee "$desktop_entry" >/dev/null

  # Update the desktop database
  sudo update-desktop-database || {
    echo "Failed to update desktop database"
    return 1
  }

  echo "Shortcut for '${name}' created successfully."
}

######################################################################
##
## extract: Extract most known archives with one command
##
######################################################################
vm_extract() {
  if [ -z "$1" ]; then
    echo "Usage: $0 <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|exe|tar.bz2|tar.gz|tar.xz>"
    return 1
  fi

  local file="$1"

  # Check if the file exists
  if [ ! -f "$file" ]; then
    echo "Error: '$file' does not exist."
    return 1
  fi

  # Extract based on file extension
  case "$file" in
  *.tar.bz2 | *.tbz2) tar xjf "$file" ;;
  *.tar.gz | *.tgz) tar xzf "$file" ;;
  *.tar.xz) tar xJf "$file" ;;
  *.lzma) unlzma "$file" ;;
  *.bz2) bunzip2 "$file" ;;
  *.rar) unrar x -ad "$file" ;;
  *.gz) gunzip "$file" ;;
  *.tar) tar xf "$file" ;;
  *.zip) unzip "$file" ;;
  *.Z) uncompress "$file" ;;
  *.7z) 7z x "$file" ;;
  *.xz) unxz "$file" ;;
  *.exe) cabextract "$file" ;;
  *) echo "Error: Unknown archive method for '$file'" ;;
  esac
}

######################################################################
##
## encrypt: Encrypt files using known archives with a single command
##
######################################################################
vm_encrypt() {
  if [ $# -lt 2 ]; then
    echo "Usage: $0 <rar|7z> <file_or_path> [keyword 'sec'|password]"
    return 1
  fi

  local type="$1"
  local file_or_path="$2"
  local password_option=""

  # Validate type and set password_option
  case "$type" in
  rar)
    if [ -n "$3" ]; then
      # If 'sec' keyword is provided, set password for RAR
      password_option="$([[ "$3" == "sec" ]] && echo "-hp")${3#sec}"
    fi
    ;;
  7z)
    if [ -n "$3" ]; then
      # If 'sec' keyword is provided, set password for 7z
      password_option="$([[ "$3" == "sec" ]] && echo "-p")${3#sec}"
    fi
    ;;
  *)
    echo "Error: Unsupported compression type '$type'. Supported types are 'rar' and '7z'."
    return 1
    ;;
  esac

  # Check if the file or path exists
  if [ ! -e "$file_or_path" ]; then
    echo "Error: '$file_or_path' is not a valid file or path."
    return 1
  fi

  # Perform the compression and encryption
  case "$type" in
  rar)
    if [ -n "$password_option" ]; then
      rar a "$password_option" "${file_or_path}.rar" "$file_or_path"
    else
      rar a "${file_or_path}.rar" "$file_or_path"
    fi
    ;;
  7z)
    if [ -n "$password_option" ]; then
      7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on "$password_option" "${file_or_path}.7z" "$file_or_path"
    else
      7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on "${file_or_path}.7z" "$file_or_path"
    fi
    ;;
  esac
}

######################################################################
##
## ionos: ...
##
######################################################################
vm_ionos_api() {
  if [ $# -lt 0 ]; then
    echo "Usage: $0"
    return 1
  fi

  local prefix
  local secret
  echo -n "Prefix: "
  read -rs prefix
  if [ -z "$prefix" ]; then
    echo "No prefix entered"
    return 1
  fi
  echo -n "Secret: "
  read -rs secret
  if [ -z "$secret" ]; then
    echo "No secret entered"
    return 1
  fi

  local response
  # local response_choose
  # response=$(curl -f -s -S -k -X GET https://api.hosting.ionos.com/dns/v1/zones -H "X-API-Key: $prefix.$secret" || {
  #   echo "ERROR: API request failed for URL: https://api.hosting.ionos.com/dns/v1/zones"
  #   return 1
  # })
  # response_choose=$(echo "$response" | jq -r '.[] | "\(.name) :: \(.id)"' | fzf)

  # local name
  # local id
  # if [ -z "$response_choose" ]; then
  #   echo "No selection made"
  #   return 0
  # fi

  # name=$(echo "$response_choose" | cut -d' ' -f1)
  # id=$(echo "$response_choose" | cut -d' ' -f3)
  # echo "You selected: name=$name, id=$id"

  # response=$(curl -f -s -S -k -X GET "https://api.hosting.ionos.com/dns/v1/zones/$id" -H "X-API-Key: $prefix.$secret")
  # echo "$response" | jq

  local domains
  echo "Please enter domain names separated by comma:"
  read -r domains

  domains=$(echo "$domains" | tr -s ' ' ',')
  domains="${domains//,/\",\"}"
  domains="\"$domains\""

  response=$(curl -f -s -S -k -X DELETE "https://api.hosting.ionos.com/dns/v1/dyndns" \
    -H "X-API-Key: $prefix.$secret" || {
    echo "ERROR: API request failed for URL: DELETE https://api.hosting.ionos.com/dns/v1/dyndns"
    return 1
  })
  echo "$response" | jq

  response=$(curl -f -s -S -k -X POST "https://api.hosting.ionos.com/dns/v1/dyndns" \
    -H "X-API-Key: $prefix.$secret" \
    -H "accept: application/json" \
    -H "Content-Type: application/json" \
    -d "{
      \"domains\":[$domains],
      \"description\": \"My DynamicDns\"
    }" || {
    echo "ERROR: API request failed for URL: POST https://api.hosting.ionos.com/dns/v1/dyndns"
    return 1
  })
  echo "$response" | jq
}
