#!/usr/bin/env bash

VM_SEC_LISTS_SECLISTS=~'/opt/sec/SecLists'
VM_SEC_LISTS_PAYLOADS=~'/opt/sec/PayloadsAllTheThings'

: ${VM_SEC_USER_AGENT:='Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:129.0) Gecko/20100101 Firefox/129.0'}

######################################################################
##
## HELPER:: loader
##
######################################################################
vm_sec_load_lists() {
  git clone https://github.com/danielmiessler/SecLists.git "$VM_SEC_LISTS_SECLISTS"
  git clone https://github.com/swisskyrepo/PayloadsAllTheThings.git "$VM_SEC_LISTS_PAYLOADS"
}

vm_sec_nmap_scripts() {
  git clone https://github.com/vulnersCom/nmap-vulners /usr/share/nmap/scripts/nmap-vulners
  git clone https://github.com/scipag/vulscan /usr/share/nmap/scripts/vulscan

  nmap --script-updatedb
}

vm_sec_install_base() {
  sudo apt install jq

  go install github.com/charmbracelet/gum@latest
}

vm_sec_install_tools() {
  # saving complete web pages as a single HTML file
  sudo apt install monolith

  go_github_commit_date_and_download(){
    IFS='/' read -r owner repo addition <<< "$1"
    echo 'LAST COMMIT' "[${repo}] ::" "$(curl -s "https://api.github.com/repos/${owner}/${repo}/commits" | jq '.[0].commit.committer.date')"
    package_path="${owner}/${repo}"
    if [ -n "$addition" ]; then package_path="${package_path}/${addition}"; fi
    go install "github.com/${package_path}@${2:-latest}"
  }

  go_github_commit_date_and_download 'projectdiscovery/httpx/cmd/httpx'
  go_github_commit_date_and_download 'projectdiscovery/katana/cmd/katana'
  go_github_commit_date_and_download 'hahwul/dalfox/v2'
  go_github_commit_date_and_download 'OJ/gobuster/v3'
  go_github_commit_date_and_download 'ffuf/ffuf/vm'
  go_github_commit_date_and_download 'dwisiswant0/unew'
  go_github_commit_date_and_download 'BishopFox/sj'
}

######################################################################
##
## FUNCTIONS:: tools
##
######################################################################
# -Pn -sS -T4
alias vm_sec_nm1='mkdir -p nmap && sudo nmap -vv -sC -oA nmap/scan1'
alias vm_sec_nm2='mkdir -p nmap && sudo nmap -vv -sC -sV -O -oA nmap/scan2 --script "nmap-vulners/,vulscan/"'

alias vm_sec_what="whatweb -v -U='${VM_SEC_USER_AGENT}'"

vm_sec_xssall() {
  gum input --placeholder='Input Target IP/DOMAIN' |
    httpx -silent |
    katana -silent |
    dalfox pipe --silence
}

# echo https://192.168.111.41 | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml -silent | dalfox pipe --skip-bav | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | unew
# echo https://192.168.111.41 | katana -jc -d 5 -c 50 -ef css,woff,woff2,eot,ttf,tiff,tif -kf robotstxt,sitemapxml | grep -v -e "="
# subfinder -d https://192.168.111.41 -silent -all | httpx -silent | katana -d 5 silent -em js,jsp,json | grep -P "(?i).+\.js(?:on|p)?$"

alias vm_sec_gobuster="gobuster dir --wordlist ${VM_SEC_LISTS_SECLISTS}/diccnoext.txt --wildcard --url"

alias vm_sec_fuzz="ffuf -w ${VM_SEC_LISTS_SECLISTS}/content_discovery_all.txt -mc all -u"
vm_sec_fuzz_path() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^(http|https):// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}/FUZZ" \
  -w "${VM_SEC_LISTS_SECLISTS}/Discovery/Web-Content/common.txt" \
  -c -ac -recursion
}
vm_sec_fuzz_dns() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^(http|https):// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}" \
  -w "${VM_SEC_LISTS_SECLISTS}/Discovery/DNS/namelist.txt" \
  -H "Host: ${protocol}://FUZZ.${domain}"
}

vm_sec_katana() {
  echo "$1" | katana -headless -fs rdn -d 1 -ct 1 -rl 10 -o result.txt -jsonl
}

alias vm_sec_massdns="massdns -r ${VM_SEC_LISTS_SECLISTS}/massdns/lists/resolvers.txt -t A -o S targets.txt -w hosts.txt -s 4000"

alias vm_sec_server='python3 -m http.server 4445'
alias vm_sec_tunnel='ngrok http 4445'

alias vm_sec_sj="sj -a ${VM_SEC_USER_AGENT} -i"

######################################################################
##
## HELPER:: converter
##
######################################################################
vm_sec_encode_utf8() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | xxd -p -u | sed 's/\(..\)/\\x\1/g'
}

vm_sec_encode_utf16() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | iconv -f UTF-8 -t UTF-16LE | xxd -p | sed 's/\(..\)\(..\)/\\u{\2\1}/g' | sed 's/\\u{00\([0-9a-fA-F]\{2\}\)}/\\u{\1}/g'
}

vm_sec_encode_base64() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  echo -n "$1" | base64
}

######################################################################
##
## FUNCTIONS:: base
##
######################################################################

vm_sec_ip_country() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <IP>"
    return 1
  fi

  local service="http://ip-api.com/json/$1?fields=5254673"
  local query='[.query, .continent, .country, .city, .isp, .org, .as, .asname] | join(" :: ")'
  #local service="https://ipapi.co/$1/json"
  #local query='[.country, .city, .asn, .org] | join(" :: ")'

  curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$service" | jq "$query"
}

vm_sec_ip_country_batch() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <FILE> :: FILE: contains IP per line"
    return 1
  fi

  ips=$(jq -R -s -c 'split("\n") | map(select(length > 0))' "$1")

  curl http://ip-api.com/batch \
    -H "User-Agent: ${VM_SEC_USER_AGENT}" \
    --data "$ips" |
    jq -r '.[] | "\(.country) :: \(.city) :: \(.isp) :: \(.org) :: \(.query)"' |
    sort -h
}

######################################################################
##
## FUNCTIONS:: APT search
##
######################################################################

vm_sec_apt() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <[name|tool|location|raw|save]> <NAME>"
    return 1
  fi

  VM_S_TYPE="$1"
  VM_APT_S="$2"
  VM_APT_JSON_LIST="https://raw.githubusercontent.com/andreacristaldi/APTmap/master/apt.json"

  case $VM_S_TYPE in
  "name")
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$VM_APT_JSON_LIST" |
      jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      (.name | ascii_downcase | contains(\"$VM_APT_S\" | ascii_downcase)) \
      or \
      (.[\"other-names\"][] | ascii_downcase | contains(\"$VM_APT_S\" | ascii_downcase)) \
      )]"
    ;;
  "tool")
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$VM_APT_JSON_LIST" |
      jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets, \
      tools: (.tools[] | select(.value | ascii_downcase | contains(\"$VM_APT_S\" | ascii_downcase))) \
      }]"
    ;;
  "location")
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$VM_APT_JSON_LIST" |
      jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      ((.location | ascii_downcase) | contains(\"$VM_APT_S\" | ascii_downcase)) and (.location | length > 0) \
      )]"
    ;;
  "raw")
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$VM_APT_JSON_LIST"
    ;;
  "save")
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -O "$VM_APT_JSON_LIST"
    ;;
  *)
    echo "Type to search is not known"
    echo "Usage: $0 <[name|tool|location|raw|save]> <NAME>"
    ;;
  esac
}
