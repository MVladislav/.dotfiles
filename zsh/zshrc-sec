#!/usr/bin/env bash

VM_SEC_LISTS_SECLISTS=~'/opt/sec/SecLists'
VM_SEC_LISTS_PAYLOADS=~'/opt/sec/PayloadsAllTheThings'
VM_SEC_LISTS_SECFILES=~'/opt/sec/SecFiles'

VM_SEC_USER_AGENT=${VM_SEC_USER_AGENT:-'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:129.0) Gecko/20100101 Firefox/129.0'}

######################################################################
##
## HELPER:: loader
##
######################################################################
vm_sec_load_lists() {
  git clone https://github.com/danielmiessler/SecLists.git "$VM_SEC_LISTS_SECLISTS"
  git clone https://github.com/swisskyrepo/PayloadsAllTheThings.git "$VM_SEC_LISTS_PAYLOADS"
}

vm_sec_nmap_scripts() {
  git clone https://github.com/vulnersCom/nmap-vulners /usr/share/nmap/scripts/nmap-vulners
  git clone https://github.com/scipag/vulscan /usr/share/nmap/scripts/vulscan

  nmap --script-updatedb
}

vm_sec_install_base() {
  sudo apt install jq

  go install github.com/charmbracelet/gum@latest
}

vm_sec_install_tools() {
  # saving complete web pages as a single HTML file
  sudo apt install monolith

  go_github_commit_date_and_download() {
    IFS='/' read -r owner repo addition <<<"$1"
    echo 'LAST COMMIT' "[${repo}] ::" "$(curl -s "https://api.github.com/repos/${owner}/${repo}/commits" | jq '.[0].commit.committer.date')"
    package_path="${owner}/${repo}"
    if [ -n "$addition" ]; then package_path="${package_path}/${addition}"; fi
    go install "github.com/${package_path}@${2:-latest}"
  }

  go_github_commit_date_and_download 'projectdiscovery/httpx/cmd/httpx'
  go_github_commit_date_and_download 'projectdiscovery/katana/cmd/katana'
  go_github_commit_date_and_download 'hahwul/dalfox/v2'
  go_github_commit_date_and_download 'OJ/gobuster/v3'
  go_github_commit_date_and_download 'ffuf/ffuf/vm'
  go_github_commit_date_and_download 'dwisiswant0/unew'
  go_github_commit_date_and_download 'BishopFox/sj'
}

######################################################################
##
## FUNCTIONS:: tools
##
######################################################################
# -Pn -sS -T4
alias vm_sec_nm1='mkdir -p nmap && sudo nmap -vv -sC -oA nmap/scan1'
alias vm_sec_nm2='mkdir -p nmap && sudo nmap -vv -sC -sV -O -oA nmap/scan2 --script "nmap-vulners/,vulscan/"'

xsltproc() {
  local NMAP_REPORT_ID="${1:-1}"
  mkdir -p /var/log/nmap
  xsltproc \
    -o "/var/log/nmap/report-$(date +%Y-%m-%d)-${NMAP_REPORT_ID}.html" \
    /opt/nmap/nmap-bootstrap.xsl \
    "/var/log/nmap/report-$(date +%Y-%m-%d)-${NMAP_REPORT_ID}.xml" \
    "$@"
}
nmap-report() {
  local NMAP_REPORT_ID="${1:-1}"
  mkdir -p /var/log/nmap
  nmap -oA /var/log/nmap/report-"$(date +%Y-%m-%d)"-"${NMAP_REPORT_ID}" "$@"
  xsltproc
}

alias whatweb="whatweb -U='${VM_SEC_USER_AGENT}'"
alias vm_sec_what="whatweb -v"

vm_sec_xssall() {
  gum input --placeholder='Input Target IP/DOMAIN' |
    httpx -silent |
    katana -silent |
    dalfox pipe --silence
}

# echo https://192.168.111.41 | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml -silent | dalfox pipe --skip-bav | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | unew
# echo https://192.168.111.41 | katana -jc -d 5 -c 50 -ef css,woff,woff2,eot,ttf,tiff,tif -kf robotstxt,sitemapxml | grep -v -e "="
# subfinder -d https://192.168.111.41 -silent -all | httpx -silent | katana -d 5 silent -em js,jsp,json | grep -P "(?i).+\.js(?:on|p)?$"

alias vm_sec_gobuster="gobuster dir --wordlist '${VM_SEC_LISTS_SECLISTS}/diccnoext.txt' --wildcard --url"

alias vm_sec_fuzz="ffuf -w '${VM_SEC_LISTS_SECLISTS}/content_discovery_all.txt' -mc all -u"
vm_sec_fuzz_path() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^(http|https):// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}/FUZZ" \
    -w "${VM_SEC_LISTS_SECLISTS}/Discovery/Web-Content/common.txt" \
    -c -ac -recursion
}
vm_sec_fuzz_dns() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <[http(s)://]HOST>"
    return 1
  fi

  # Check if the URL contains http or https
  if [[ "$1" =~ ^(http|https):// ]]; then
    # Extract protocol and domain
    protocol=$(echo "$1" | awk -F'://' '{print $1}')
    domain=$(echo "$1" | awk -F'://' '{print $2}')
  else
    # Default to https if no protocol is found
    protocol="https"
    domain="$1"
  fi

  ffuf -u "${protocol}://${domain}" \
    -w "${VM_SEC_LISTS_SECLISTS}/Discovery/DNS/namelist.txt" \
    -H "Host: ${protocol}://FUZZ.${domain}"
}

vm_sec_katana() {
  echo "$1" | katana -headless -fs rdn -d 1 -ct 1 -rl 10 -o result.txt -jsonl
}

alias vm_sec_massdns="massdns -r '${VM_SEC_LISTS_SECLISTS}/massdns/lists/resolvers.txt' -t A -o S targets.txt -w hosts.txt -s 4000"

alias vm_sec_server='python3 -m http.server 4445'
alias vm_sec_tunnel='ngrok http 4445'

alias sj="sj -a '${VM_SEC_USER_AGENT}'"
alias vm_sec_sj="sj -i"

alias nuclei="nuclei -header 'User-Agent: ${VM_SEC_USER_AGENT}'"

######################################################################
##
## HELPER:: converter
##
######################################################################
vm_sec_encode_utf8() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | xxd -p -u | sed 's/\(..\)/\\x\1/g'
}

vm_sec_encode_utf16() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  printf '%s' "$1" | iconv -f UTF-8 -t UTF-16LE | xxd -p | sed 's/\(..\)\(..\)/\\u{\2\1}/g' | sed 's/\\u{00\([0-9a-fA-F]\{2\}\)}/\\u{\1}/g'
}

vm_sec_encode_base64() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <STRING>"
    return 1
  fi
  echo -n "$1" | base64
}

######################################################################
##
## FUNCTIONS:: base
##
######################################################################
vm_sec_ip_country() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <IP>"
    return 1
  fi

  local service="http://ip-api.com/json/$1?fields=5254673"
  local query='[.query, .continent, .country, .city, .isp, .org, .as, .asname] | join(" :: ")'
  #local service="https://ipapi.co/$1/json"
  #local query='[.country, .city, .asn, .org] | join(" :: ")'

  curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s "$service" | jq "$query"
}

vm_sec_ip_country_batch() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <FILE> :: FILE: contains IP per line"
    return 1
  fi

  ips=$(jq -R -s -c 'split("\n") | map(select(length > 0))' "$1")

  curl http://ip-api.com/batch \
    -H "User-Agent: ${VM_SEC_USER_AGENT}" \
    --data "$ips" |
    jq -r '.[] | "\(.country) :: \(.city) :: \(.isp) :: \(.org) :: \(.query)"' |
    sort -h
}

######################################################################
##
## FUNCTIONS:: APT search
##
######################################################################
vm_sec_apt() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <[name|tool|location|raw]> <NAME>"
    return 1
  fi

  local vm_s_type="$1"
  local vm_apt_s="$2"
  local vm_apt_json_list='https://raw.githubusercontent.com/andreacristaldi/APTmap/master/apt.json'
  local vm_apt_file="$VM_SEC_LISTS_SECFILES/apt.json"

  # Create the directory if it doesn't exist
  mkdir -p "$VM_SEC_LISTS_SECFILES"

  # Check if the file doesn't exist or is older than 1 day (86400 seconds)
  if [ ! -f "$vm_apt_file" ] || [ "$(stat -c %Y "$vm_apt_file")" -lt "$(($(date +%s) - 86400))" ]; then
    echo "Downloading apt.json (file missing or older than one day)..."
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s -o "$vm_apt_file" "$vm_apt_json_list"
  fi

  case $vm_s_type in
  "name")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      (.name | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase)) \
      or \
      (.[\"other-names\"][] | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase)) \
      )]" "$vm_apt_file"
    ;;
  "tool")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets, \
      tools: (.tools[] | select(.value | ascii_downcase | contains(\"$vm_apt_s\" | ascii_downcase))) \
      }]" "$vm_apt_file"
    ;;
  "location")
    jq "[.features[] | .properties | {name, \"other-names\",\"first-seen\",country,location,sponsor,motivations,targets} \
      | select( \
      ((.location | ascii_downcase) | contains(\"$vm_apt_s\" | ascii_downcase)) and (.location | length > 0) \
      )]" "$vm_apt_file"
    ;;
  "raw")
    cat "$vm_apt_file"
    ;;
  *)
    echo "Type to search is not known"
    echo "Usage: $0 <[name|tool|location|raw]> <NAME>"
    ;;
  esac
}

######################################################################
##
## FUNCTIONS:: MITRE technique search
##
######################################################################
vm_sec_mitre() {
  local USAGE="Usage: $0 <[short|detail|tactics|intrusion|malware]> (<SEARCH>)"
  local vm_s_type="$1"

  if [ "$vm_s_type" = "tactics" ]; then
    [ "$#" -lt 1 ] && {
      echo "$USAGE"
      return 1
    }
  else
    [ "$#" -lt 2 ] && {
      echo "$USAGE"
      return 1
    }
  fi

  local vm_mitre_s="$2"
  # local vm_mitre_json_list='https://raw.githubusercontent.com/mitre/cti/refs/heads/master/enterprise-attack/enterprise-attack.json'
  local vm_mitre_json_list='https://raw.githubusercontent.com/mitre-attack/attack-stix-data/refs/heads/master/enterprise-attack/enterprise-attack.json'
  local vm_mitre_file="$VM_SEC_LISTS_SECFILES/enterprise-attack.json"

  mkdir -p "$VM_SEC_LISTS_SECFILES"
  if [ ! -f "$vm_mitre_file" ] || [ "$(stat -c %Y "$vm_mitre_file")" -lt "$(($(date +%s) - 86400))" ]; then
    echo "Downloading enterprise-attack.json (file missing or older than one day)..."
    curl -H "User-Agent: ${VM_SEC_USER_AGENT}" -s -o "$vm_mitre_file" "$vm_mitre_json_list"
  fi

  local output
  case "$vm_s_type" in
  detail | tactics | intrusion | malware)
    output='{
        name: .name,
        type: .type,
        description: .description,
        ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
        ref_urls: ([.external_references[]? | select(has("url")) | .url]),
        ref_names: ([.external_references[]? | select(has("source_name")) | .source_name]),
        ref_descriptions: ([.external_references[]? | select(has("description")) | .description])
      }'
    ;;
  short)
    output='{
        name: .name,
        type: .type,
        ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
        ref_urls: ([.external_references[]? | select(has("url")) | .url] | .[0])
      }'
    ;;
  *)
    echo "Type to search is not known"
    echo "$USAGE"
    return 1
    ;;
  esac

  # Additional type filters for some modes.
  local type_filter=''
  local type_filter_reverse=''
  local type_filter_relation1=''
  local type_filter_relation2=''
  case "$vm_s_type" in
  tactics) type_filter=' and (.type | IN("x-mitre-tactic"))' ;;
  intrusion)
    type_filter=' and (.type | IN("intrusion-set"))'
    type_filter_reverse='"malware","tool"'
    type_filter_relation1='source_ref'
    type_filter_relation2='target_ref'
    ;;
  malware)
    type_filter=' and (.type | IN("malware"))'
    type_filter_reverse='"intrusion-set"'
    type_filter_relation1='target_ref'
    type_filter_relation2='source_ref'
    ;;
  esac

  # Build a common search filter (search across name, description, external descriptions, and external IDs).
  # shellcheck disable=SC2016
  local common_filter='
    .objects[]
    | select(
        (
          ((.description // "") | ascii_downcase | contains($s | ascii_downcase))
          or
          ([.external_references[]? | (.description // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
          or
          ((.name // "") | ascii_downcase | contains($s | ascii_downcase))
          or
          ([.external_references[]? | (.external_id // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
        )
        and (.name != null)
        '$type_filter'
      )
  '

  jq --arg s "$vm_mitre_s" "$common_filter | $output" "$vm_mitre_file"

  # ---

  # shellcheck disable=SC2016
  # local output_extended='{
  #       base_ids: $base_ids,
  #       relation: $relation,
  #       final: ($final | map({
  #         name: .name,
  #         ref_ids: ([.external_references[]? | select(has("external_id")) | .external_id] | join(", ")),
  #       }))
  #     }'
  local output_extended='($final | map('$output'))'

  # shellcheck disable=SC2016
  local common_filter_extended='
    . as $root
    |
    # Base search: get IDs of objects matching the query.
    ($root.objects
      | map(select(
          (
            ((.description // "") | ascii_downcase | contains($s | ascii_downcase))
            or
            ([.external_references[]? | (.description // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
            or
            ((.name // "") | ascii_downcase | contains($s | ascii_downcase))
            or
            ([.external_references[]? | (.external_id // "")] | join(" ") | ascii_downcase | contains($s | ascii_downcase))
          )
          and (.name != null)
          '$type_filter'
        ))
      | map(.id)
      | unique
    ) as $base_ids

    |
    # First hop: find relationship objects whose source_ref is in the base IDs.
    ($root.objects
      | map(select(
          .type=="relationship"
          and has($r1)
          and (getpath([$r1]) | type=="string")
          and ( (getpath([$r1])) as $sr | ($base_ids | index($sr)) != null )
          # and (getpath([$r2]) | startswith($r))
        ))
      | map(getpath([$r2]))
      | unique
    ) as $relation

    |
    # Final lookup: get objects whose id is in the final IDs.
    ($root.objects
      | map(select(
          ( (.type) as $tt | ($r | index($tt)) != null )
          and has("id")
          and (.id | type=="string")
          and ( (.id) as $fid | ($relation | index($fid)) != null )
        ))
    ) as $final
  '

  jq \
    --arg s "$vm_mitre_s" \
    --arg r "$type_filter_reverse" \
    --arg r1 "$type_filter_relation1" \
    --arg r2 "$type_filter_relation2" \
    "$common_filter_extended | $output_extended" "$vm_mitre_file"
}
