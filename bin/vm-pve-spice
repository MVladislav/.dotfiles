#!/usr/bin/env bash

# Description:
#   This script interacts with a Proxmox Virtual Environment (PVE) to manage VMs via the PVE API.
#   It can start, stop, and connect to VMs using virt-viewer or a similar tool.

# Usage:
#   ./script.sh <VM_ID>
#   ./script.sh stop

# Exit on any error
set -e

# Default values for Proxmox and API credentials
PVE_NODE="${PVE_NODE:-pve}"
PVE_PROTOCOL="${PVE_PROTOCOL:-https}"
PVE_PROXY="${PVE_PROXY:-pve.home.local}"
PVE_PORT="${PVE_PORT:-8006}"
PVE_API_USER="${PVE_API_USER:-api_spice@pam!spice}"
PVE_VM_PROCESS="start"
PVE_VMID="${1}"

# Early exit if required dependencies are missing
for cmd in jq curl; do
  if ! command -v "$cmd" >/dev/null; then
    echo "ERROR: Command '$cmd' is required but not installed."
    exit 1
  fi
done

# Handle "stop" process
if [[ "$1" == "stop" ]]; then
  PVE_VM_PROCESS="stop"
  PVE_VMID=""
fi

# Prompt for missing API credentials
if [ -z "$PVE_API_USER" ]; then
  read -rp "API User: " PVE_API_USER
fi

if [ -z "$PVE_TOKEN" ]; then
  read -rsp "Token: " PVE_TOKEN
  echo
fi

# Function to make API requests
api_request() {
  local url="$1"
  local method="$2"
  local data="$3"

  curl -f -s -S -k -X "$method" \
    -H "Authorization: PVEAPIToken=$PVE_API_USER=$PVE_TOKEN" \
    ${data:+-d "$data"} \
    "$url" || {
    echo "ERROR: API request failed for URL: $url"
    exit 1
  }
}

# Fetch VM List if VM ID is not provided
if [ -z "$PVE_VMID" ]; then
  RESPONSE=$(api_request "$PVE_PROTOCOL://$PVE_PROXY:$PVE_PORT/api2/json/nodes/$PVE_NODE/qemu" "GET")
  echo "$RESPONSE" | jq -r '.data | .[] | " \(.status | if . == "stopped" then "ðŸ”´" elif . == "running" then "ðŸŸ¢" else . end) \(.vmid) :: \(.name)"' | sort -h
  read -rp "VM ID: " PVE_VMID
fi

if [ -z "$PVE_VMID" ]; then
  echo "ERROR: VM ID not set"
  exit 1
fi

# Fetch VM Status
RESPONSE=$(api_request "$PVE_PROTOCOL://$PVE_PROXY:$PVE_PORT/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/status/current" "GET")
STATUS=$(echo "$RESPONSE" | jq -r '.data.qmpstatus')

# Start/Stop VM
if [[ "$PVE_VM_PROCESS" == "stop" ]]; then
  if [[ "$STATUS" == "running" ]]; then
    echo "Stopping VM ..."
    api_request "$PVE_PROTOCOL://$PVE_PROXY:$PVE_PORT/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/status/shutdown" "POST" >/dev/null
  else
    echo "VM is not running."
  fi
  exit 0
fi

if [[ "$STATUS" == "stopped" ]]; then
  echo "VM is stopped. Starting VM ..."
  api_request "$PVE_PROTOCOL://$PVE_PROXY:$PVE_PORT/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/status/start" "POST" >/dev/null
  echo "Waiting 3 seconds before attempting a Spice connection ..."
  sleep 3
fi

# Fetch Spice Configuration
RESPONSE=$(api_request "$PVE_PROTOCOL://$PVE_PROXY:$PVE_PORT/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/spiceproxy" "POST" "proxy=$PVE_PROXY")

# Generate Spice Configuration File
PVE_TMP=$(mktemp)
spice_keys=("secure-attention" "delete-this-file" "proxy" "type" "ca" "toggle-fullscreen" "title" "host" "password" "host-subject" "release-cursor" "tls-port")
{
  echo "[virt-viewer]"
  for key in "${spice_keys[@]}"; do
    echo "$key=$(echo "$RESPONSE" | jq -r ".data.\"$key\"" | sed ':a;N;$!ba;s/\n/\\\\n/g')"
  done
} >"$PVE_TMP"

# {
#   echo "[virt-viewer]"
#   echo "secure-attention=$(echo "$RESPONSE" | jq -r '.data."secure-attention"')"
#   echo "delete-this-file=$(echo "$RESPONSE" | jq -r '.data."delete-this-file"')"
#   echo "proxy=$(echo "$RESPONSE" | jq -r '.data.proxy')"
#   echo "type=$(echo "$RESPONSE" | jq -r '.data.type')"
#   echo "ca=$(echo "$RESPONSE" | jq -r '.data.ca' | sed ':a;N;$!ba;s/\n/\\\\n/g')"
#   echo "toggle-fullscreen=$(echo "$RESPONSE" | jq -r '.data."toggle-fullscreen"')"
#   echo "title=$(echo "$RESPONSE" | jq -r '.data.title')"
#   echo "host=$(echo "$RESPONSE" | jq -r '.data.host')"
#   echo "password=$(echo "$RESPONSE" | jq -r '.data.password')"
#   echo "host-subject=$(echo "$RESPONSE" | jq -r '.data."host-subject"')"
#   echo "release-cursor=$(echo "$RESPONSE" | jq -r '.data."release-cursor"')"
#   echo "tls-port=$(echo "$RESPONSE" | jq -r '.data."tls-port"')"
# } >"$PVE_TMP"

# Launch virt-viewer
if false && command -v flatpak &>/dev/null && flatpak list | grep -q 'org.virt_manager.virt-viewer'; then
  nohup flatpak run org.virt_manager.virt-viewer "$PVE_TMP" >/dev/null 2>&1 &
elif command -v virt-viewer &>/dev/null; then
  nohup remote-viewer "$PVE_TMP" >/dev/null 2>&1 &
else
  echo "virt-viewer is not installed. Please install it via Flatpak or your package manager."
  exit 1
fi
