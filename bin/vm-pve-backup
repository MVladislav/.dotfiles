#!/usr/bin/env bash
PATH=/usr/bin:/usr/local/bin:/bin:/usr/sbin:/sbin
set -euo pipefail
IFS=$'\n\t'

# Trap SIGINT and SIGTERM to exit the script gracefully
trap "echo 'Backup interrupted. Exiting...'; exit 1" SIGINT SIGTERM

# ******************************************************************************

# Constants
# shellcheck disable=SC2034
readonly FILES_TO_BACKUP_PVE=(
  "/etc/default/grub"
  "/etc/kernel/cmdline"
  "/etc/systemd/system/mnt-*.mount"
  "/etc/pve/storage.cfg"
  "/etc/systemd/network/*.link"
  "/etc/network/interfaces"
  "/etc/network/interfaces.new"
  "/etc/network/interfaces.d/sdn"
  "/etc/pve/sdn/subnets.cfg"
  "/etc/pve/sdn/vnets.cfg"
  "/etc/pve/sdn/zones.cfg"
  "/etc/pve/jobs.cfg"
  "/etc/pve/datacenter.cfg"
  "/etc/pve/mapping/pci.cfg"
  "/etc/pve/mapping/usb.cfg"
  "/etc/pve/notifications.cfg"
)
# shellcheck disable=SC2034
readonly FILES_TO_BACKUP_PBS=(
  "/etc/default/grub"
  "/etc/kernel/cmdline"
  "/etc/proxmox-backup/notifications.cfg"
  "/etc/fstab"
  "/etc/proxmox-backup/node.cfg"
  "/etc/proxmox-backup/datastore.cfg"
  "/etc/proxmox-backup/verification.cfg"
  "/etc/proxmox-backup/prune.cfg"
)

# Variables
REMOTE_HOST=""
BACKUP_DIR=""
DRY_RUN=false
BACKUP_PVE=false
BACKUP_PBS=false
RESTORE_MODE=false

# ******************************************************************************

# Backup mode: Pull files from remote host to local backup directory
main_backup() {
  # Set default backup directory if not provided (includes a timestamp)
  BACKUP_DIR="${BACKUP_DIR:-/tmp/backup-pve-${REMOTE_HOST}-$(date +%Y%m%d%H%M%S)}"
  mkdir -p "$BACKUP_DIR" || {
    print_error1 "Error: Unable to create backup directory '$BACKUP_DIR'"
    exit 1
  }

  print_info1 "üí° Backup started at $(date)\n"

  # Sync files based on chosen backup options
  [[ $BACKUP_PVE == true ]] && sync_files FILES_TO_BACKUP_PVE[@] "pve"
  [[ $BACKUP_PBS == true ]] && sync_files FILES_TO_BACKUP_PBS[@] "pbs"

  if [[ $BACKUP_PVE == false && $BACKUP_PBS == false ]]; then
    print_error2 "Nothing to backup. Please choose '-pve' or '-pbs'."
    usage
    exit 1
  fi

  print_info1 "üí° Backup completed. Files saved to $BACKUP_DIR."
}

# Restore mode: Push files from local backup directory to remote host
main_restore() {
  # In restore mode the backup directory must exist
  if [[ ! -d "$BACKUP_DIR" ]]; then
    print_error1 "Error: Backup directory '$BACKUP_DIR' does not exist."
    exit 1
  fi

  print_info1 "üí° Restore started at $(date)\n"

  [[ $BACKUP_PVE == true ]] && restore_files FILES_TO_BACKUP_PVE[@] "pve"
  [[ $BACKUP_PBS == true ]] && restore_files FILES_TO_BACKUP_PBS[@] "pbs"

  if [[ $BACKUP_PVE == false && $BACKUP_PBS == false ]]; then
    print_error2 "Nothing to restore. Please choose '-pve' or '-pbs'."
    usage
    exit 1
  fi

  print_info1 "üí° Restore completed. Files from $BACKUP_DIR restored to $REMOTE_HOST."
}

# ******************************************************************************

# Function to sync files using rsync (Backup direction: Remote -> Local)
sync_files() {
  local files_list=("${!1}")
  local type="$2"
  local total_files=0 total_errors=0 total_size=0
  local start_time end_time elapsed_time

  start_time=$(date +%s)

  for FILE_PATTERN in "${files_list[@]}"; do
    if [[ -z "$FILE_PATTERN" ]]; then
      print_error2 "Empty file pattern encountered. Skipping..."
      continue
    fi

    # Construct local target directory
    local local_dir
    local_dir="$BACKUP_DIR/$type$(dirname "$FILE_PATTERN")"

    if [[ "$DRY_RUN" == true ]]; then
      print_info1 "üßÅ [Dry Run] Would back up: '$FILE_PATTERN' into '$local_dir'"
      continue
    fi

    print_info1 "üí° Backing up: $FILE_PATTERN"
    mkdir -p "$local_dir" || {
      print_error2 "Unable to create directory $local_dir"
      continue
    }

    # Sync files with rsync from remote host to local backup directory
    if ! rsync --info=progress2 -auz -e "ssh -T -o Compression=no -x" \
      --include="$(basename "$FILE_PATTERN")" --exclude="*" \
      "$REMOTE_HOST:$(dirname "$FILE_PATTERN")/" "$local_dir/"; then
      print_error2 "Error backing up $FILE_PATTERN"
      total_errors=$((total_errors + 1))
      continue
    fi

    total_files=$((total_files + 1))
    local size
    size=$(du -sb "$local_dir" | cut -f1)
    total_size=$((total_size + size))
  done

  backup_zfs_info "$type"

  end_time=$(date +%s)
  elapsed_time=$((end_time - start_time))

  print_info2 "Total files backed up: $total_files"
  print_info2 "Total size transferred: $((total_size / 1024)) KB"
  print_info2 "Total errors encountered: $total_errors"
  print_info2 "Elapsed time: ${elapsed_time}s\n"
}

backup_zfs_info() {
  local type="$1"
  local zfs_dir="$BACKUP_DIR/$type/zfs-configs"

  if [[ "$DRY_RUN" == true ]]; then
    print_info1 "üßÅ [Dry Run] Would run remote ZFS commands and store output to '$zfs_dir'"
    return
  fi

  print_info1 "üí° Backing up ZFS configuration..."
  mkdir -p "$zfs_dir"

  ssh "$REMOTE_HOST" "zfs list -r -o name,used,avail,refer,mountpoint" >"$zfs_dir/zfs_list.txt" || print_error2 "Failed to fetch 'zfs list'"
  ssh "$REMOTE_HOST" "zfs get all -r" >"$zfs_dir/zfs_get_all.txt" || print_error2 "Failed to fetch 'zfs get all'"
  ssh "$REMOTE_HOST" "zpool status" >"$zfs_dir/zpool_status.txt" || print_error2 "Failed to fetch 'zpool status'"
  ssh "$REMOTE_HOST" "zpool get all" >"$zfs_dir/zpool_get_all.txt" || print_error2 "Failed to fetch 'zpool get all'"
  ssh "$REMOTE_HOST" "zpool list" >"$zfs_dir/zpool_list.txt" || print_error2 "Failed to fetch 'zpool list'"

  print_info2 "ZFS configuration saved under $zfs_dir"
}

# Function to restore files using rsync (Restore direction: Local -> Remote)
restore_files() {
  local files_list=("${!1}")
  local type="$2"
  local total_files=0 total_errors=0 total_size=0
  local start_time end_time elapsed_time

  start_time=$(date +%s)

  for FILE_PATTERN in "${files_list[@]}"; do
    if [[ -z "$FILE_PATTERN" ]]; then
      print_error2 "Empty file pattern encountered. Skipping..."
      continue
    fi

    # Local directory holding the backup
    local local_dir
    local_dir="$BACKUP_DIR/$type$(dirname "$FILE_PATTERN")"

    if [[ "$DRY_RUN" == true ]]; then
      print_info1 "üßÅ [Dry Run] Would restore: '$local_dir/$(basename "$FILE_PATTERN")' to '$REMOTE_HOST:$(dirname "$FILE_PATTERN")/'"
      continue
    fi

    print_info1 "üí° Restoring: $local_dir/$(basename "$FILE_PATTERN") to $REMOTE_HOST:$(dirname "$FILE_PATTERN")/"
    # Upload files from local backup directory to remote host # --rsync-path="sudo -S rsync" \
    if ! rsync --info=progress2 -auz -e "ssh -tt -T -o Compression=no -x" \
      --include="$(basename "$FILE_PATTERN")" --exclude="*" \
      "$local_dir/" "$REMOTE_HOST:$(dirname "$FILE_PATTERN")/"; then
      print_error2 "Error restoring $FILE_PATTERN"
      total_errors=$((total_errors + 1))
      continue
    fi

    total_files=$((total_files + 1))
    local size
    size=$(du -sb "$local_dir" | cut -f1)
    total_size=$((total_size + size))
  done

  restore_zfs_info "$type"

  end_time=$(date +%s)
  elapsed_time=$((end_time - start_time))

  print_info2 "Total files restored: $total_files"
  print_info2 "Total size transferred: $((total_size / 1024)) KB"
  print_info2 "Total errors encountered: $total_errors"
  print_info2 "Elapsed time: ${elapsed_time}s\n"
}

restore_zfs_info() {
  local type="$1"
  local zfs_dir="$BACKUP_DIR/$type/zfs-configs"

  print_info1 "üí° Manual ZFS restore instructions"

  if [[ ! -d "$zfs_dir" ]]; then
    print_error2 "ZFS backup directory not found: $zfs_dir"
    return
  fi

  echo -e "\nüìÅ ZFS configuration files are located in: $zfs_dir\n"
  echo
  echo "üß† Tip: Always check each command before running it, especially if restoring to a new system."
  echo
  echo "You can use the following manual steps on your restored Proxmox system:"
  echo
  echo "1Ô∏è‚É£  View all datasets:"
  echo "    less $zfs_dir/zfs_list.txt"
  echo
  echo "2Ô∏è‚É£  Import your ZFS pool (check name from 'zpool_list.txt'):"
  echo "    zpool import"
  echo "    zpool import <yourpoolname>"
  echo
  echo "3Ô∏è‚É£  (Optional) Set mountpoints if needed:"
  echo "    zfs set mountpoint=/mnt/<something> <yourpoolname>/<dataset>"
  echo
  echo "4Ô∏è‚É£  Reapply ZFS dataset properties:"
  echo "    less $zfs_dir/zfs_get_all.txt"
  echo "    zfs set <property>=<value> <dataset>"
  echo
  echo "5Ô∏è‚É£  Review pool status and properties:"
  echo "    less $zfs_dir/zpool_status.txt"
  echo "    less $zfs_dir/zpool_get_all.txt"
  echo
  echo "6Ô∏è‚É£  (Optional) Add to Proxmox storage config:"
  echo "    nano /etc/pve/storage.cfg"
  echo "    # Example:"
  echo "    zfspool: mypool"
  echo "        pool yourpoolname"
  echo "        content rootdir,images"
  echo "        mountpoint /mnt/<yourmount> # optional"
  echo
}

# ******************************************************************************

# Function to list SSH hosts from ~/.ssh/config using fzf
choose_remote_host() {
  local ssh_config=~/.ssh/config
  if [[ ! -f "$ssh_config" ]]; then
    echo "No SSH config found at $ssh_config" >&2
    exit 1
  fi

  # Extract host names from SSH config, ignoring wildcards
  local host
  host=$(grep -E '^\s*Host\s+' "$ssh_config" | awk '{for(i=2;i<=NF;i++) print $i}' | grep -vE '^\*' | sort -u | fzf --prompt="Select remote host: ")

  if [[ -z "$host" ]]; then
    echo "No remote host selected. Exiting." >&2
    exit 1
  fi

  REMOTE_HOST="$host"
}

# ******************************************************************************

# Logging functions
print_info1() { echo -e "$1"; }
print_info2() { echo -e "üî≠ $1"; }
print_info3() { echo -e "$1"; }
print_error1() { echo -e "üî¥ $1" >&2; }
print_error2() { echo -e "‚ö†Ô∏è $1" >&2; }

usage() {
  print_info3 "üìñ Usage: $0 -r <REMOTE_HOST> [options]"
  print_info3 "üìñ Options:"
  print_info3 "   -h, --help          Show this help message and exit"
  print_info3 "   -r, --remote-host   Remote server alias from .ssh/config. If not provided, you'll be prompted via fzf."
  print_info3 "   -b, --backup-dir    Local backup directory (for backup, a default is created; for restore, it must exist)"
  print_info3 "   -R, --restore       Restore mode: upload files from backup directory back to remote host"
  print_info3 "   -pve                Backup/restore from Proxmox Virtual Environment"
  print_info3 "   -pbs                Backup/restore from Proxmox Backup Server"
  print_info3 "   -t, --dry-run       Simulate the backup/restore process without transferring files"
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -r | --remote-host)
      REMOTE_HOST="$2"
      shift 2
      ;;
    -b | --backup-dir)
      BACKUP_DIR="$2"
      shift 2
      ;;
    -R | --restore)
      RESTORE_MODE=true
      shift
      ;;
    -pve)
      BACKUP_PVE=true
      shift
      ;;
    -pbs)
      BACKUP_PBS=true
      shift
      ;;
    -t | --dry-run)
      DRY_RUN=true
      shift
      ;;
    *)
      print_error1 "Unknown option: $1"
      usage
      exit 1
      ;;
    esac
  done

  # If REMOTE_HOST was not provided, prompt via fzf
  if [[ -z "$REMOTE_HOST" ]]; then
    choose_remote_host
  fi
}

# ******************************************************************************

# Validate required commands are available
check_dependencies() {
  local commands=(rsync ssh du mkdir fzf)
  for cmd in "${commands[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      print_error1 "Error: Required command '$cmd' not found."
      exit 1
    fi
  done
}

# Validate remote host connectivity
validate_remote_host() {
  if ! ssh -q -o ConnectTimeout=5 "$REMOTE_HOST" exit; then
    print_error1 "Error: Unable to connect to remote host '$REMOTE_HOST'"
    exit 1
  fi
}

# Check if rsync is installed on the remote host
check_remote_rsync() {
  if ! ssh -q -o ConnectTimeout=5 "$REMOTE_HOST" "command -v rsync" >/dev/null 2>&1; then
    print_error1 "Error: 'rsync' is not installed on remote host '$REMOTE_HOST'"
    exit 1
  fi
}

# ******************************************************************************

# Main execution
parse_args "$@"
check_dependencies

validate_remote_host
check_remote_rsync

if [[ "$RESTORE_MODE" == true ]]; then
  main_restore
else
  main_backup
fi
exit 0
