#!/usr/bin/env bash
PATH=/usr/bin/:/usr/local/bin/:/bin:/usr/sbin/:/sbin/
set -euo pipefail
IFS=$'\n\t'

# ******************************************************************************

REMOTE_HOST="your_proxmox_server_alias"
BACKUP_DIR=""

# List of files and directories to back up
FILES_TO_BACKUP_PVE=(
  "/etc/systemd/system/mnt-*.mount"
  "/etc/pve/storage.cfg"
  "/etc/systemd/network/*.link"
  "/etc/network/interfaces"
  "/etc/network/interfaces.new"
  "/etc/network/interfaces.d/sdn"
  "/etc/pve/sdn/subnets.cfg"
  "/etc/pve/sdn/vnets.cfg"
  "/etc/pve/sdn/zones.cfg"
  "/etc/pve/jobs.cfg"
  "/etc/pve/datacenter.cfg"
  "/etc/pve/mapping/pci.cfg"
  "/etc/pve/mapping/usb.cfg"
  "/etc/pve/notifications.cfg"
)
FILES_TO_BACKUP_PBS=(
  "/etc/proxmox-backup/notifications.cfg"
  "/etc/fstab"
  "/etc/proxmox-backup/node.cfg"
  "/etc/proxmox-backup/datastore.cfg"
  "/etc/proxmox-backup/verification.cfg"
  "/etc/proxmox-backup/prune.cfg"
)

export FILES_TO_BACKUP_PVE
export FILES_TO_BACKUP_PBS

# ******************************************************************************

usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -h, --help          Show this help message and exit"
  echo "  -r, --remote-host   Remote server alias (default: your_proxmox_server_alias)"
  echo "  -b, --backup-dir    Local backup directory (default: /tmp/backup-pve-${REMOTE_HOST})"
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    -h | --help)
      usage
      exit 0
      ;;
    -r | --remote-host)
      REMOTE_HOST="$2"
      BACKUP_DIR="/tmp/backup-pve-${REMOTE_HOST}"
      shift 2
      ;;
    -b | --backup-dir)
      BACKUP_DIR="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $key" >&2
      usage
      exit 1
      ;;
    esac
  done

  if [[ -z "$BACKUP_DIR" ]]; then
    BACKUP_DIR="/tmp/backup-pve-${REMOTE_HOST}"
  fi
}

# ******************************************************************************

# Parse command-line arguments
parse_args "$@"

# Ensure the backup directory exists
mkdir -p "$BACKUP_DIR"

# Trap SIGINT (Ctrl+C) to exit the script and stop the rsync loop
trap "echo 'Backup interrupted. Exiting...'; exit 1" SIGINT

# Function to sync files using rsync
sync_files() {
  local -n files_list=$1
  local type="$2"

  local total_files=0
  local total_errors=0
  local total_size=0

  local start_time
  start_time=$(date +%s)

  for FILE_PATTERN in "${files_list[@]}"; do
    echo "Backing up: $FILE_PATTERN"

    # Validate and construct local target directory
    local local_dir
    local_dir="$BACKUP_DIR/$type$(dirname "$FILE_PATTERN")"
    mkdir -p "$local_dir"

    # Sync files with rsync, using tested compatibility options
    if rsync --info=progress2 -auz -e "ssh -T -o Compression=no -x" --include="$(basename "$FILE_PATTERN")" --exclude="*" \
      "$REMOTE_HOST:$(dirname "$FILE_PATTERN")/" "$local_dir/"; then
      total_files=$((total_files + 1))
      # Calculate size of transferred files
      local size
      size=$(du -sb "$local_dir" | cut -f1)
      total_size=$((total_size + size))
    else
      echo "Error backing up $FILE_PATTERN" >&2
      total_errors=$((total_errors + 1))
    fi
  done

  local end_time
  end_time=$(date +%s)
  local elapsed_time
  elapsed_time=$((end_time - start_time))

  echo "Total files backed up: $total_files"
  echo "Total size transferred: $((total_size / 1024)) KB"
  echo "Total errors encountered: $total_errors"
  echo "Elapsed time: ${elapsed_time}s"
  echo ""
}

# Sync files
sync_files "FILES_TO_BACKUP_PVE" "pve"
sync_files "FILES_TO_BACKUP_PBS" "pbs"

# Print completion message
echo "Backup completed. Files saved to $BACKUP_DIR."
